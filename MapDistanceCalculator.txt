'MacroName:MapDistanceCalculator.2018.07
'MacroDescription:Calculates distances using the map's scale.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
'
' Last updated: 14 December 2018.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 2.63 and 64-bit Windows 7 Enterprise &
' 64-bit Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works. Run the macro to calculate a distance or length based on a map's scale.
' The macro uses the scale of the map to calculate the distance in the world given a
' measurement on the map, or the distance on the map given a measurement in the world.
'
' If a bibliographic record for a map is open (whether or not you are logged on), the
' macro looks for a scale statement in either the first 034 field or the first 255 field.
' If neither field is present, you must supply a scale (which can be determined by using
' my macro "CalcScale"). Enter the denominator of the scale ratio (e.g., "1045440") or
' the ratio as found on the resource (e.g., "1:1,045,440"). The macro will ignore commas
' and spaces used to separate thousands. Don't enter any alphabetic characters, or the
' quotation marks used in these examples. Enter a measurement. This number can include a
' fraction or a decimal, such as ".25" or "1 13/16". Include a space between a fraction
' and a whole number, but don't add spaces around the slash. Also exclude quotation marks
' from this string. Select the appropriate unit of the measurement--inches, feet, yards,
' miles, centimeters, meters, kilometers, rods, or chains. Select the unit of the answer.
' (Metric and United States customary units can be mixed, so you can enter a measurement
' in inches, for example, and get the result in kilometers.) Click the "Calculate"
' button. The macro calculates a precise answer, which can be rounded to three or fewer
' significant digits by clicking the "Round" button.
'
' If the OUTPUT unit is inches or centimeters, the macro's calculation is of the distance
' on the map of a measurement in the world. For example, given a scale of 1:126,720, if
' the measurement is entered as "1 mile" and the output unit is "inches", the macro's
' answer is "0.5"--indicating that a distance of a mile in the world is shown as half an
' inch on the map. Otherwise, the macro's answer is the distance in the world of a
' measurement on the map. This should be the same (allowing for rounding) as if the scale
' were given in verbal form. For example, given a scale of 1:1,140,000, if "1 inch" were
' entered as input and "miles" chosen as the output unit, the macro calculates 17.99262--
' which is essentially the same as the scale presented on the map: "Scale ca. 18 miles =
' 1 inch." That is, one inch on the maps represents 18 miles in the world.
'****************************************************************************************

Option Explicit

Declare Sub FillArrays
Declare Sub HelpBox

Declare Function CheckInput( StrInput$, WhichControl% ) As Integer
Declare Function RoundUp( NumInput As Double ) As Double

Declare Function Dialog1ControlFunction( Id$, Action%, SVal& )

Const MEASUREMENT_INPUT As Integer = 1
Const NO_INPUT          As Integer = 0
Const SCALE_INPUT       As Integer = 0
Const VALID_INPUT       As Integer = 1

Const CENTIMETERS       As Integer = 4
Const CHAINS            As Integer = 8
Const FEET              As Integer = 1
Const INCHES            As Integer = 0
Const KILOMETERS        As Integer = 6
Const METERS            As Integer = 5
Const MILES             As Integer = 3
Const RODS              As Integer = 7
Const YARDS             As Integer = 2

Dim Measurement$
Dim ScaleString$
Dim WaltsMacros$

Dim Scale

Dim Multiplier( 8, 8 ) As Variant
Dim UnitsList ( 8 )    As String

'****************************************************************************************

Sub Main

Const DISPLAY_FF_AT_TOP As Integer = 1   'The value to display the fixed field at the top of a record.

Dim DELIMITER As String*1    : DELIMITER = Chr$( 223 )

Dim CS As Object             : Set CS        = CreateObject("Connex.Client")
Dim FieldData$
Dim PosFF%
Dim TypeOfRecord$
Dim TypeOfWindow%
Dim TestChar$

Dim ChangedFFView            : ChangedFFView = FALSE

Dim p As Integer, q As Integer

WaltsMacros$  = "[Walt's macros] Extras2:MapDistanceCalculator"

' First, determine if a map bibliographic record is displayed; if it is, try to get a
' scale from either the first 034 or the first 255 field.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case 0 To 1, 17
    PosFF% = CS.FixedFieldPosition
    If PosFF% <> DISPLAY_FF_AT_TOP Then
        CS.FixedFieldPosition = DISPLAY_FF_AT_TOP
        ChangedFFView         = TRUE
    End If
    If CS.GetFixedField( "Type", TypeOfRecord$ ) Then
        If ChangedFFView Then CS.FixedFieldPosition = PosFF%
        If TypeOfRecord$ Like "[ef]" Then
            If CS.GetField( "034", 1, FieldData$ ) Then
                p = InStr( FieldData$, DELIMITER & "b" )
                If p > 0 Then
                    q = InStr( p + 1, FieldData$, DELIMITER )
                    If q > 0 Then
                        Scale = Trim$( Mid$( FieldData$, p + 2, ( q - p ) - 2 ) )
                      Else
                        Scale = Trim$( Mid$( FieldData$, p + 2 ) )
                    End If
                End If
            End If
            If IsEmpty( Scale ) Then
                If CS.GetField( "255", 1, FieldData$ ) Then
                    p = InStr( FieldData$, ":" )
                    If p > 0 Then
                        For q = p + 1 To Len( FieldData$ )
                          TestChar$ = Mid$( FieldData$, q, 1 )
                          If TestChar$ Like "[!0-9 ,]" Then
                              Exit For
                          End If
                        Next q
                        Scale = Trim$( Mid$( FieldData$, p + 1, q - p - 1 ) )
                    End If
                End If
            End If
        End If
    End If
End Select

If Not IsEmpty( Scale ) Then
    ScaleString$ = "1:" & Trim$( Str$( Scale ) )
End If

FillArrays

Begin Dialog Dialog1Definition  168, 138, WaltsMacros$, .Dialog1ControlFunction
  TextBox        98,  26,  60,  12,                             .InputNumberBox
  DropListBox    98,  42,  60,  88, UnitsList(),                .InputUnitListBox
  DropListBox    98,  60,  60,  88, UnitsList(),                .OutputUnitListBox
  PushButton     10,  79,  58,  14, "&Calculate",               .CalcButton
  PushButton     82,  95,  64,  12, "&Round result",            .RoundupButton
  CancelButton  106, 114,  52,  14
  PushButton     10, 114,  52,  14, "&?",                       .Help
  TextBox        98,   8,  60,  12,                             .InputScaleBox
  TextBox        72,  80,  86,  12,                             .OutputNumberBox
  Text           10,  10,  80,   8, "",                         .InputScaleText
  Text           10,  63,  80,   8, "Select output unit:",      .OutputUnitText
  Text           10,  45,  80,   8, "Select measurement unit:"
  Text           10,  28,  80,   8, "Enter a measurement:"
End Dialog

Dim Dialog1 As Dialog1Definition
On Error Resume Next
Dialog Dialog1

End Sub

'****************************************************************************************

Sub FillArrays

' These factors are taken from Google.

Multiplier( INCHES,      INCHES )      = 1
Multiplier( INCHES,      FEET )        = 0.0833333
Multiplier( INCHES,      YARDS )       = 0.0277778
Multiplier( INCHES,      MILES )       = 1.5783e-5
Multiplier( INCHES,      CENTIMETERS ) = 2.54
Multiplier( INCHES,      METERS )      = 0.0254
Multiplier( INCHES,      KILOMETERS )  = 2.54e-5
Multiplier( INCHES,      RODS )        = 0.00505051
Multiplier( INCHES,      CHAINS )      = 0.00126263
Multiplier( FEET,        INCHES )      = 12
Multiplier( FEET,        FEET )        = 1
Multiplier( FEET,        YARDS )       = 0.333333
Multiplier( FEET,        MILES )       = 0.000189394
Multiplier( FEET,        CENTIMETERS ) = 30.48
Multiplier( FEET,        METERS )      = 0.3048
Multiplier( FEET,        KILOMETERS )  = 0.0003048
Multiplier( FEET,        RODS )        = 0.0606061
Multiplier( FEET,        CHAINS )      = 0.0151515
Multiplier( YARDS,       INCHES )      = 36
Multiplier( YARDS,       FEET )        = 3
Multiplier( YARDS,       YARDS )       = 1
Multiplier( YARDS,       MILES )       = 0.000568182
Multiplier( YARDS,       CENTIMETERS ) = 91.44
Multiplier( YARDS,       METERS )      = 0.9144
Multiplier( YARDS,       KILOMETERS )  = 0.0009144
Multiplier( YARDS,       RODS )        = 0.181818
Multiplier( YARDS,       CHAINS )      = 0.0454545
Multiplier( MILES,       INCHES )      = 63360
Multiplier( MILES,       FEET )        = 5280
Multiplier( MILES,       YARDS )       = 1760
Multiplier( MILES,       MILES )       = 1
Multiplier( MILES,       CENTIMETERS ) = 160934
Multiplier( MILES,       METERS )      = 1609.34
Multiplier( MILES,       KILOMETERS )  = 1.60934
Multiplier( MILES,       RODS )        = 320
Multiplier( MILES,       CHAINS )      = 80
Multiplier( CENTIMETERS, INCHES )      = 0.393701
Multiplier( CENTIMETERS, FEET )        = 0.0328084
Multiplier( CENTIMETERS, YARDS )       = 0.0109361
Multiplier( CENTIMETERS, MILES )       = 6.213712e-6
Multiplier( CENTIMETERS, CENTIMETERS ) = 1
Multiplier( CENTIMETERS, METERS )      = 0.01
Multiplier( CENTIMETERS, KILOMETERS )  = 1.0e-5
Multiplier( CENTIMETERS, RODS )        = 0.00198839
Multiplier( CENTIMETERS, CHAINS )      = 0.000497097
Multiplier( METERS,      INCHES )      = 39.3701
Multiplier( METERS,      FEET )        = 3.28084
Multiplier( METERS,      YARDS )       = 1.09361
Multiplier( METERS,      MILES )       = 0.000621371
Multiplier( METERS,      CENTIMETERS ) = 100
Multiplier( METERS,      METERS )      = 1
Multiplier( METERS,      KILOMETERS )  = 0.001
Multiplier( METERS,      RODS )        = 0.198839
Multiplier( METERS,      CHAINS )      = 0.0497097
Multiplier( KILOMETERS,  INCHES )      = 39370.1
Multiplier( KILOMETERS,  FEET )        = 3280.84
Multiplier( KILOMETERS,  YARDS )       = 1093.61
Multiplier( KILOMETERS,  MILES )       = 0.621371
Multiplier( KILOMETERS,  CENTIMETERS ) = 100000
Multiplier( KILOMETERS,  METERS )      = 1000
Multiplier( KILOMETERS,  KILOMETERS )  = 1
Multiplier( KILOMETERS,  RODS )        = 198.839
Multiplier( KILOMETERS,  CHAINS )      = 49.7097
Multiplier( RODS,        INCHES )      = 198
Multiplier( RODS,        FEET )        = 16.5
Multiplier( RODS,        YARDS )       = 5.5
Multiplier( RODS,        MILES )       = 0.003125
Multiplier( RODS,        CENTIMETERS ) = 502.92
Multiplier( RODS,        METERS )      = 5.0292
Multiplier( RODS,        KILOMETERS )  = 0.0050292
Multiplier( RODS,        RODS )        = 1
Multiplier( RODS,        CHAINS )      = 4
Multiplier( CHAINS,      INCHES )      = 792
Multiplier( CHAINS,      FEET )        = 66
Multiplier( CHAINS,      YARDS )       = 22
Multiplier( CHAINS,      MILES )       = 0.0125
Multiplier( CHAINS,      CENTIMETERS ) = 2011.68
Multiplier( CHAINS,      METERS )      = 20.1168
Multiplier( CHAINS,      KILOMETERS )  = 0.0201168
Multiplier( CHAINS,      RODS )        = 0.25
Multiplier( CHAINS,      CHAINS )      = 1

UnitsList( 0 ) = "inches"
UnitsList( 1 ) = "feet"
UnitsList( 2 ) = "yards"
UnitsList( 3 ) = "miles"
UnitsList( 4 ) = "centimeters"
UnitsList( 5 ) = "meters"
UnitsList( 6 ) = "kilometers"
UnitsList( 7 ) = "rods"
UnitsList( 8 ) = "chains"

End Sub

'****************************************************************************************

Sub HelpBox

Dim DOUBLE_QUOTE As String*1 : DOUBLE_QUOTE = Chr$( 034 )

Dim HelpText1$
Dim HelpText2$
Dim HelpText3$
Dim HelpText4$
Dim HelpText5$

HelpText1$ = "SCALE. If a bibliographic record with a scale in an 034 or 255 field is open, the macro will attempt to use the "
HelpText1$ = HelpText1$ & "scale from that record. Otherwise, enter a scale. You can enter the simple denominator (e.g., "
HelpText1$ = HelpText1$ & DOUBLE_QUOTE & "20000" & DOUBLE_QUOTE & ") or the complete ratio (e.g., " & DOUBLE_QUOTE & "1:20000"
HelpText1$ = HelpText1$ & DOUBLE_QUOTE & "). Don't enter any other characters, such as " & DOUBLE_QUOTE & "ca." & DOUBLE_QUOTE
HelpText1$ = HelpText1$ & "or the quotation marks in these examples, although commas or spaces separating thousands can be "
HelpText1$ = HelpText1$ & "used."
HelpText2$ = "MEASUREMENT. Enter a measurement, either from the map or from the world. It can be a fraction (e.g., "
HelpText2$ = HelpText2$ & DOUBLE_QUOTE & "1 5/8" & DOUBLE_QUOTE & ") or a decimal (e.g., " & DOUBLE_QUOTE & "2.5"
HelpText2$ = HelpText2$  & DOUBLE_QUOTE & "). When entering a fraction, include a space before the fraction and no spaces "
HelpText2$ = HelpText2$ & "around the slash. Then select the unit of the measurement from the drop-down menu. If the "
HelpText2$ = HelpText2$ & "measurement is taken from the map, select inches or centimeters as the unit."
HelpText3$ = "OUTPUT UNITS. Select the output unit from the drop-down list. If the input unit is inches or centimeters, the "
HelpText3$ = HelpText3$ & "result will be the measurement in the world scaled up from the measurement on the map. If the "
HelpText3$ = HelpText3$ & "output unit is inches or centimeters, the result will be the measurement on the map scaled down "
HelpText3$ = HelpText3$ & "from the measurement in the world. Metric and United States customary units can be mixed; for "
HelpText3$ = HelpText3$ & "example, the input measurement could be in centimeters and the output in miles."
HelpText4$ = "ROUND BUTTON. Click this button to round the answer to fewer than four significant digits."
HelpText5$ = "COPY BUTTON. Click this button to copy the result to the Windows clipboard."

Begin Dialog Dialog2Definition  288, 224, WaltsMacros$
  OkButton      166, 200,  52,  14
  CancelButton  226, 200,  52,  14
  Text           10,   6, 268,  40, HelpText1$
  Text           10,  54, 268,  40, HelpText2$
  Text           10, 102, 268,  48, HelpText3$
  Text           10, 158, 268,  16, HelpText4$
  Text           10, 182, 268,   8, HelpText5$
End Dialog

Dim Dialog2 As Dialog2Definition
On Error Resume Next
Dialog Dialog2

End Sub

'****************************************************************************************

Function CheckInput( StrInput$, WhichControl% ) As Integer

' This function checks the input for existence (SOMETHING needs to be entered) and
' validity (only numbers and a decimal point or slash are acceptable).

Const INVALID_INPUT As Integer = 2

Dim DecimalEquivalent
Dim Denominator%
Dim Numerator%
Dim SlashCount%
Dim SpaceCount%
Dim TempString$
Dim TestChar$
Dim WholeNum$

Dim i As Integer

If StrInput$ = "" Then
    CheckInput = NO_INPUT
    Exit Function
  Else
    For i = 1 To Len( StrInput$ )
      TestChar$ = Mid$( StrInput$, i, 1 )

      Select Case TestChar$

        Case "A" To "Z", "a" To "z"
          CheckInput = INVALID_INPUT
          Exit Function

        Case "0" To "9"
          TempString$ = TempString$ & TestChar$

        Case "."
          If WhichControl% = MEASUREMENT_INPUT Then
              TempString$ = TempString$ & TestChar$
          End If

        Case ","
          If WhichControl% = MEASUREMENT_INPUT Then
              CheckInput = INVALID_INPUT
              Exit Function
          End If

        Case " "
          If WhichControl% = MEASUREMENT_INPUT Then
              SpaceCount% = SpaceCount% + 1
              If SpaceCount% > 1 Or SlashCount% > 0 Then     'Can't have a space after the slash.
                  CheckInput  = INVALID_INPUT
                  Exit Function
                Else
                  WholeNum$   = TempString$    'Space found: Whole number complete.
                  TempString$ = ""             'Empty string to start numerator.
              End If
          End If

        Case "/"
          If WhichControl% = MEASUREMENT_INPUT Then
              If SlashCount% = 0 Then
                  If TempString$ = "" Then     'Nothing for numerator: Problem.
                      CheckInput  = INVALID_INPUT
                      Exit Function
                    Else
                      Numerator%  = Val( TempString$ )
                      TempString$ = ""         'Empty the string to start denominator.
                      SlashCount% = SlashCount% + 1
                  End If
                Else
                  CheckInput = INVALID_INPUT
                  Exit Function
              End If
          End If

        Case ":"
          If WhichControl% = SCALE_INPUT Then
              If TempString$ <> "1" Then
                  CheckInput  = INVALID_INPUT
                  Exit Function
                Else
                  TempString$ = ""         'Empty the string.
              End If
          End If

        Case Else
          CheckInput = INVALID_INPUT
          Exit Function

      End Select

    Next i
End If

If WhichControl% = SCALE_INPUT Then
    ScaleString$ = TempString$
  Else
    If SlashCount% = 1 Then
        If Right$( StrInput$, 1 ) <> "/" Then
            Denominator% = Val( TempString$ )
            If Numerator% = 0 And Denominator% = 0 Then
                DecimalEquivalent = 0
              Else
                DecimalEquivalent = Numerator% / Denominator%
            End If
        End If
      Else
        WholeNum$ = TempString$
    End If
    If DecimalEquivalent = 0 Then
        Measurement$ = WholeNum$
      Else
        Measurement$ = WholeNum$ & Trim$( Str$( DecimalEquivalent ) )
    End If
End If

CheckInput = VALID_INPUT

End Function

'****************************************************************************************

Function RoundUp( NumInput As Double ) As Double

' Rounds up numbers.

Const MAX_INTEGER As Integer = 32767

Dim DecimalPart$
Dim RoundUpChar$
Dim StringNum$
Dim TempNum As Double

Dim p As Integer

If NumInput > MAX_INTEGER Then
    StringNum$ = CStr( NumInput )
    p = InStr( StringNum$, "." )
    If p > 0 Then
        DecimalPart$ = Mid$( StringNum$, p + 1, 1 )
        If Val( DecimalPart$ ) >= 5 Then
            RoundUpChar$ = Mid$( StringNum$, p - 1, 1 )
            RoundUpChar$ = CStr( Val( RoundUpChar$ ) + 1 )
            StringNum$   = Left$( StringNum$, p - 2 ) & RoundUpChar$
            TempNum      = Val( StringNum$ )
          Else
            TempNum      = Val( Left$( StringNum$, p - 1 ) )
        End If
      Else
        TempNum = NumInput
    End If
  Else
    TempNum = Int( NumInput )
    If NumInput - TempNum > .5 Then TempNum = TempNum + 1
End If

RoundUp = TempNum

End Function

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SVal& )

Const CONTROL_CHANGE As Integer = 2   'The value of the dialog box function parameter "Action%" when a control changes.
Const DISABLED       As Integer = 0   'The value to make a dialog box control disabled.
Const ENABLED        As Integer = 1   'The value to make a dialog box control enabled.
Const FOCUS_CHANGE   As Integer = 4   'The value of the dialog box function parameter "Action%" when the control focus changes.
Const IDLE_STATE     As Integer = 5   'The value of the dialog box function parameter "Action%" while no action is occurring.
Const INITIALIZE     As Integer = 1   'The value of the dialog box function parameter "Action%" when the dialog box opens.
Const KEEP_DLG_OPEN  As Integer = -1  'The value of the dialog box function to keep a dialog box open.

Dim Exponent%
Dim InputUnits%
Dim OutputUnits%
Dim Result$
Dim TypeOfVariant%

Dim Operand
Dim IntegerPart
Dim TempCalc

Static Calculation
Static CheckInputMeasurement%
Static CheckInputScale%
Static CurrentMeasure$
Static CurrentScale$

Select Case Action%

  Case INITIALIZE

    DlgValue  "InputUnitListBox",  INCHES
    DlgEnable "OutputNumberBox",   DISABLED
    DlgValue  "OutputUnitListBox", MILES
    If IsEmpty( Scale ) Then
        DlgText   "InputScaleText",    "Enter a scale:"
        DlgEnable "CalcButton",        DISABLED
        DlgFocus  "InputScaleBox"
      Else
        DlgText   "InputScaleText",    "Scale on map:"
        DlgText   "InputScaleBox",     ScaleString$
        DlgFocus  "InputNumberBox"
    End If
    DlgEnable "RoundupButton",     DISABLED


  Case CONTROL_CHANGE

    Select Case Id$

      Case "CalcButton", "InputUnitListBox", "OutputUnitListBox"

        If CheckInputScale% = VALID_INPUT And CheckInputMeasurement% = VALID_INPUT Then
            Scale        = Val( ScaleString$ )
            Operand      = Val( Measurement$ )
            InputUnits%  = DlgValue("InputUnitListBox" )
            OutputUnits% = DlgValue("OutputUnitListBox" )
            If ( OutputUnits% = INCHES And InputUnits% <> CENTIMETERS ) Or ( OutputUnits% = CENTIMETERS ) Then
                Calculation = ( Operand / Scale ) * Multiplier( InputUnits%, OutputUnits% ) 'output < input
              Else
                Calculation = ( Operand * Scale ) * Multiplier( InputUnits%, OutputUnits% ) 'output >= input
            End If
            TypeOfVariant% = VarType( Calculation )
            If Calculation < 1 Then
             If TypeOfVariant% = 5 Then
                Result$     = Trim$( Str$( Calculation ) )
              Else
                Result$     = "0" & Trim$( Str$( Calculation ) )
             End If
                DlgEnable "RoundupButton",     ENABLED
              Else
                IntegerPart = Fix( Calculation )
                If Calculation - IntegerPart > 0 Then
                    DlgEnable "RoundupButton",     ENABLED
                End If
                Result$     = Trim$( Str$( Calculation ) )
            End If
            DlgText   "OutputNumberBox",   Result$
            DlgEnable "OutputNumberBox",   ENABLED
            Dialog1ControlFunction = KEEP_DLG_OPEN
        End If

      Case "RoundupButton"

        IntegerPart = Fix( Calculation )
        If IntegerPart > 100 Then
            TempCalc = RoundUp( Calculation )
          Else
            Exponent% = 0
            Do
              Exponent% = Exponent% + 1
              TempCalc = Calculation * 10 ^ Exponent%
            Loop Until TempCalc > 10
            TempCalc = RoundUp( TempCalc )
            TempCalc = TempCalc / 10 ^ Exponent%
        End If
        If TempCalc < 1 Then
            Result$ = "0" & Trim$( Str$( TempCalc ) )
          Else
            Result$ = Trim$( Str$( TempCalc ) )
        End If
        DlgText   "OutputNumberBox",   Result$
        Dialog1ControlFunction = KEEP_DLG_OPEN

      Case "Help"

        HelpBox
        Dialog1ControlFunction = KEEP_DLG_OPEN

    End Select


  Case FOCUS_CHANGE

' Show the scale as a ratio after it's been entered.

    If SVal& = DlgControlID ("InputScaleBox" ) Then
        If Trim$( DlgText("InputScaleBox" ) ) <> "" Then
            DlgText   "InputScaleBox",     "1:" & ScaleString$
        End If
    End If


  Case IDLE_STATE

' As input is entered, check its validity so as to know when to enable the controls.

    CurrentScale$          = Trim$( DlgText("InputScaleBox" ) )
    CurrentMeasure$        = Trim$( DlgText("InputNumberBox" ) )
    CheckInputScale%       = CheckInput( CurrentScale$, SCALE_INPUT )
    CheckInputMeasurement% = CheckInput( CurrentMeasure$, MEASUREMENT_INPUT )
    If CheckInputScale% = VALID_INPUT And CheckInputMeasurement% = VALID_INPUT Then
        DlgEnable "CalcButton",        ENABLED
      Else
        DlgEnable "CalcButton",        DISABLED
    End If
    Dialog1ControlFunction = KEEP_DLG_OPEN

End Select

End Function
'65126456
'
'Macro name: MapDistanceCalculator
'Macro book: C:\Program Files (x86)\OCLC\Connexion\Program\Macros\Extras2.mbk
'Saved: 12/17/2018 9:13:00 AM using "MacroBookInspector" macro by Walter F. Nickeson.
