'MacroName:PasteUnformattedPlus.2018.06
'MacroDescription:Removes some formatting from text placed on the Clipboard for pasting
' into Connexion as a string or as a new field. Also converts extended ASCII characters
' to OCLC-MARC.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
'
' Last updated: 19 July 2018.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 2.63 and 64-bit Windows 7 Enterprise &
' 64-bit Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: Use this macro to paste text copied to the Windows clipboard from outside
' Connexion (the Web, a document from a word processor, etc.) into a Connexion record.
' The macro attempts to unformat text by removing carriage returns, line feeds, and tabs,
' and collapsing white space. Typographical niceties such as proper quotation marks
' (sometimes called "curly quotes") are changed to simple, straight slashes; em and en
' dashes become double hyphens; an ellipsis is turned into three dots with a space
' preceding and following; two single quotation marks (including the grave, `) are
' combined into one double quotation mark. The macro converts extended ASCII characters
' (chiefly vowels with diacritical marks, but also some other characters, like the
' delimiter (decimal 135) and letters C and N) to OCLC-MARC. It changes the pipe
' character to a delimiter. All non-printing characters are simply excised.
'
' Carriage returns can be changed to spaces or to dashes (space-hyphen-hyphen-space), as
' used in contents notes. If the macro finds carriage returns in the copied text, it
' displays a dialog box for choosing in which way to change them. That same dialog box
' offers the option of pasting the copied text in at the cursor position, or, if
' delimiters were found, adding it as a new field. But if the copied text contains
' neither carriage returns nor delimiters, the macro will proceed with its conversions
' and paste the unformatted string in immediately at the cursor position.
'
' If the copied text is to be added as a new field, the dialog box asks for a tag and
' indicators. If a tag is not supplied, the field will still be added, but with fill
' characters as the tag. If indicators are not supplied, but are defined for the given
' tag, fill characters will appear as a reminder to add information.
'
' To convert characters with diacritics in a single line of a record, use Joel Hahn's
' macro "CvtDiacritics," which replaces, a field at a time, all Latin-1/Unicode single-
' character letter + diacritic combinations with the proper MARC21 separate letters and
' diacritic characters. Joel's macro is available at <http://www.hahnlibrary.net/
' libraries/oml/macros/CvtDiacritics.txt>.
'****************************************************************************************

Option Explicit

Declare Function Convert1252( InputString$ ) As String
Declare Function Replace    ( InputString$, Replacement$, Remove$ ) As String

Declare Function Dialog1ControlFunction( Id$, Action%, SValue& )

Global Const FIELD_BEGIN  As Integer = 1
Global Const FIELD_END    As Integer = 3
Global Const FIELD_MIDDLE As Integer = 2
Global Const FIXED_FIELD  As Integer = 0

Global CursorPosition%
Global Tag$
Global TempStringDash$
Global TempStringSpace$
Global WaltsMacros$
Global DisplayString$


Global DELIMITER_OCLC As String*1
Global FILL_CHAR      As String*1
Global INDICATOR_1    As String*1
Global INDICATOR_2    As String*1
Global QUOTE          As String*1

Global AddFieldDefault
Global CRFound
Global DelimFound

'****************************************************************************************

Sub Main

Const CANCEL           As Integer = 102 'The value returned by the dialog box when the "Cancel" button is clicked.
Const CRITICAL_MESSAGE As Integer = 16  'The value to display a "Critical message" (which includes the red button with
                                        ' a big "X") in a message box; used to report the macro quitting.
Const DELIMITER_ASCI   As Integer = 135

Dim CS As Object
Set CS = CreateObject("Connex.Client")

Dim CharA%
Dim Character$
Dim CharT$
Dim Col%
Dim CurrentField$
Dim CurrentFieldLength%
Dim RawString$
Dim Row%
Dim StringPaste$
Dim TempString$
Dim TypeOfWindow%

Dim CR                As String*1 : CR                = Chr$( 013 )
Dim CR_SPACE_AFTER    As String*2 : CR_SPACE_AFTER    = CR & " "
Dim CR_SPACE_BEFORE   As String*2 : CR_SPACE_BEFORE   = " " & CR
Dim DELIMITER_CLIP    As String*1
Dim EMPTY_TAG         As String*3
Dim TWO_CRs           As String*2 : TWO_CRs           = CR & CR
Dim TWO_SINGLE_QUOTES As String*2 : TWO_SINGLE_QUOTES = Chr$( 039 ) & Chr$( 039 )
Dim TWO_SPACES        As String*2 : TWO_SPACES        = "  "

Dim i As Integer

DELIMITER_CLIP  = Chr$( 159 )
DELIMITER_OCLC  = Chr$( 223 )
FILL_CHAR       = Chr$( 252 )
EMPTY_TAG       = FILL_CHAR & FILL_CHAR & FILL_CHAR
QUOTE           = Chr$( 034 )
WaltsMacros$    = "[Walt's macros] Extras1:PasteUnformattedPlus"

CRFound         = FALSE
DelimFound      = FALSE
AddFieldDefault = FALSE

' First, make sure there is text on the clipboard to paste.

On Error Resume Next
RawString$ = Trim$( Clipboard.GetText( ) )
If Err > 0 Then
    If Err = 14 Then
        MsgBox "There is too much data on the Clipboard!", CRITICAL_MESSAGE, WaltsMacros$
      Else
        MsgBox "Sorry, an unexpected error occurred.", CRITICAL_MESSAGE, WaltsMacros$
    End If
    Exit Sub
End If

If RawString$ = "" Then
    MsgBox "Sorry, this macro only works when there is text to paste in bibliographic or authority records.", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

' Then, make sure a record is available for the copied data to be pasted into.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 5 To 13, 15 To 16, 21 To 36
    MsgBox "Sorry, this macro only works when there is text to paste in bibliographic or authority records.", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

Row% = CS.CursorRow
Col% = CS.CursorColumn

' If there is text on the clipboard and a record to paste it into, start the process by
' removing extraneous carriage return/line feeds (and any other non-printing characters,
' that is, characters with ASCII values below 32) at the end of the string.

For i = Len( RawString$ ) To 1 Step -1
  CharT$ = Mid$( RawString$, i, 1 )
  CharA% = Asc( CharT$ )
  If CharA% > 31 Then
      RawString$ = Trim$( Left$( RawString$, i ) )
      Exit For
  End If
Next

' Go through the text on the clipboard, substituting plain text characters for characters
' not allowed. This is a preliminary go-through, as the string must be gone through again
' when pasting the text in as a new field (these characters will, except for the
' delimiter, paste from the clipboard successfully).

For i = 1 To Len( RawString$ )
  CharT$ = Mid$( RawString$, i, 1 )
  CharA% = Asc( CharT$ )
  Select Case CharA%
    Case 0 To 12, 14 To 31
      Character$ = " "
    Case 13
      Character$ = CharT$
      CRFound    = TRUE
    Case 124, DELIMITER_ASCI
      Character$ = " " & DELIMITER_OCLC
      DelimFound = TRUE
      If i = 1 Then
          If Mid$( RawString$, i + 1, 1 ) = "a" Then
              AddFieldDefault = TRUE
          End If
      End If
    Case 32 To 95, 97 To 123, 125, 128, 130 To 132, 138, 140, 142, 154
      Character$ = CharT$
    Case 156, 158 To 159, 163, 169, 174, 176 To 179, 185, 186, 191 To 255
      Character$ = CharT$
    Case 133
      Character$ = "..."
'    Case 96
'      Character$ = Chr$( 039 )
    Case 145 To 146
      Character$ = Chr$( 039 )
    Case 147 To 148
      Character$ = Chr$( 034 )
    Case 150
      Character$ = "-"
    Case 151
      Character$ = "--"
    Case 94, 96, 126, 136, 152, 168, 175, 180, 184
'      MsgBox "ELSE -- " & CharT$
      Character$ = ""
    Case Else
      Character$ = ""
  End Select

  TempString$ = TempString$ & Character$

Next i

TempString$ = Trim$( TempString$ )

' Do a first round of eliminating extra white space.

TempString$ = Replace( (TempString$), " ", TWO_SPACES )

' Check the beginning of the text for a tag and indicators, looking for the pattern of
' three digits, a space, a pair of characters from the set [ _0-9], and another space,
' followed by text. If found, remove this string, process the remainder, and stick the
' tag and indicators back on at the end.

Tag$ = Left$( TempString$, 4 )
If Tag$ Like "### " And Val( Tag$ ) > 9 Then
    If Mid$( TempString$, 5, 1 ) Like "[ _0-9]" Then
        If Mid$( TempString$, 6, 1 ) Like "[ _0-9]" And Mid$( TempString$, 7, 1 ) = " " And Mid$( TempString$, 8, 1 ) <> " " Then
            INDICATOR_1 = Mid$( TempString$, 5, 1 )
            INDICATOR_2 = Mid$( TempString$, 6, 1 )
            TempString$ = Mid$( TempString$, 8 )
          ElseIf Mid$( TempString$, 6, 1 ) = " " And Mid$( TempString$, 7, 1 ) <> " " Then
            INDICATOR_1 = " "
            INDICATOR_2 = Mid$( TempString$, 5, 1 )
            TempString$ = Mid$( TempString$, 7 )
          Else
            Tag$ = ""
        End If
      Else
        Tag$ = ""
    End If
  Else
    Tag$ = ""
End If

If INDICATOR_1 = "_" Then INDICATOR_1 = " "
If INDICATOR_2 = "_" Then INDICATOR_2 = " "

' Combine consecutive single quotation marks into one double quotation mark.

TempString$ = Replace( (TempString$), QUOTE, TWO_SINGLE_QUOTES )

' Add a space after subfield codes.

TempString$ = Replace( (TempString$), DELIMITER_OCLC, DELIMITER_OCLC )

' If carriage returns have been found, process the string to convert them.

If CRFound = TRUE Then

' Eliminate spaces preceding and following carriage returns.

    TempString$ = Replace( (TempString$), CR$, CR_SPACE_BEFORE )
    TempString$ = Replace( (TempString$), CR$, CR_SPACE_AFTER )

' Collapse consecutive occurrences of a carriage return to a single occurrence.

    TempString$ = Replace( (TempString$), CR$, TWO_CRs )

' Convert carriage returns to spaces.

    TempStringSpace$ = Replace( (TempString$), " ", CR )

' Convert carriage returns to space-dash-space (i.e., space-hyphen-hyphen-space).

    TempStringDash$ = Replace( (TempString$), " -- ", CR )

' As the last step, clean up any remaining or introduced double spaces.

    TempStringSpace$ = Replace( TempStringSpace$, " ", TWO_SPACES )
    TempStringDash$  = Replace( TempStringDash$, " ", TWO_SPACES )

  Else
    TempStringSpace$ = Replace( TempString$, " ", TWO_SPACES )
End If

' If the first characters represent subfield $a, they can be eliminated, as Connexion
' will discard them anyway.

If Left$( TempString$, 2 ) = DELIMITER_OCLC & "a" Then TempStringSpace$ = Trim$( Mid$( TempStringSpace$, 3 ) )
If Left$( TempString$, 2 ) = DELIMITER_OCLC & "a" Then TempStringDash$  = Trim$( Mid$( TempStringDash$, 3 ) )

' The paste options:
'  1. A string with carriage returns always requires direction for treatment of those
'     returns--whether to change them to spaces or to dashes.
'  2. No string can be pasted in the fixed field, or in a tag or indicator cell.
'  3. A string with neither delimiters nor carriage returns will be pasted in immediately
'     at the cursor position, except if the cursor is in the fixed field or a tag or
'     indicator cell, in which case the dialog box will prompt to paste the string as a
'     new field.
'  4. A string with delimiters will be pasted in immediately if the field is empty, but
'     will trigger the dialog box otherwise, as it may be that a whole new field is what
'     is wanted.
' So the first step is to check the position of the cursor.

If Col% = 0 Then                                            'cursor in FF
    CursorPosition% = FIXED_FIELD
    StringPaste$    = "[String]"
  Else
    If CS.GetFieldLine( Row%, CurrentField$ ) Then
        CurrentFieldLength% = Len( CurrentField$ )
        If Col% < 6 Then                                    'cursor in Tag/Ind
            If CurrentFieldLength% < 6 Then                 'empty field
                Col%            = 6
                CS.CursorColumn = 6
                CursorPosition% = FIELD_BEGIN
              Else                                          'non-empty field
                CursorPosition% = FIELD_BEGIN
'                CS.CursorColumn = CurrentFieldLength% + 1
'                CursorPosition% = FIELD_END
            End If
          Else                                              'cursor in field
            If CurrentFieldLength% < 6 Then                 'empty field
                Col%            = 6
                CS.CursorColumn = 6
                CursorPosition% = FIELD_BEGIN
              Else                                          'non-empty field
                If Col% < CurrentFieldLength% Then          'cursor in field
                    CursorPosition% = FIELD_MIDDLE
                  Else                                      'cursor at end of field
                    CursorPosition% = FIELD_END
                End If
            End If
        End If
      Else
        CursorPosition% = FIELD_MIDDLE
    End If
End If

' The position of the cursor determines some of the text in the dialog box.

Select Case CursorPosition%

  Case FIELD_BEGIN
    StringPaste$ = "S&tring, at beginning of current field"

  Case FIELD_MIDDLE
    StringPaste$ = "S&tring, at cursor position"

  Case FIELD_END
    StringPaste$ = "S&tring, at end of current field"

End Select

' Some strings can be pasted in immediately, as described above.

If CRFound = FALSE Then
    If DelimFound = FALSE Then
       If CursorPosition% = FIXED_FIELD Then
            MsgBox "Sorry, no pasting into the fixed field is allowed!", CRITICAL_MESSAGE, WaltsMacros$
            Exit Sub
          Else
            Clipboard.Clear
            Clipboard.SetText TempString$
            CS.Paste
            Exit Sub
        End If
      Else
        If AddFieldDefault = FALSE Then
            If CursorPosition% = FIELD_BEGIN Then GoTo PasteNow:
        End If
    End If
  Else
    If Col% = 6 And CurrentFieldLength% < 6 Then GoTo PasteNow:
End If

Tag$ = Trim$( Tag$ )

' The dialog box for decisions to be made: Whether to convert carriage returns (if
' present) to spaces or to dashes, and how to paste the string--as a string anywhere, or
' as a new field.

Begin Dialog Dialog1Definition  260, 188, WaltsMacros$, .Dialog1ControlFunction
  OptionGroup                                                           .ChoicePaste
   OptionButton   18,  18, 104,  12, StringPaste$,                      .OptionPasteAsString
   OptionButton   18,  32,  44,  12, "&New field:",                     .OptionPasteAsField
  TextBox         66,  32,  18,  12,                                    .TextBoxTag
  TextBox         88,  32,   8,  12,                                    .TextBoxInd1
  TextBox         98,  32,   8,  12,                                    .TextBoxInd2
  OptionGroup                                                           .ChoiceReplace
   OptionButton  168,  18,  36,  12, "&Spaces",                         .OptionConvertToSpaces
   OptionButton  168,  32,  36,  12, "&Dashes",                         .OptionConvertToDashes
  OkButton       138, 164,  52,  14
  CancelButton   198, 164,  52,  14
  GroupBox        10,   6, 116,  46, "Paste copied text in as ..."
  GroupBox       134,   6, 116,  46, "Convert carriage returns to ...", .ConvertQ
  GroupBox        10,  58, 240,  98, "",                                .ConvertedTextBox
  Text            18,  70, 224,  80, "",                                .DS
  Text            18, 134, 200,  16, "",                                .EndNote
End Dialog

Dim Dialog1 As Dialog1Definition
On Error Resume Next
Dialog Dialog1
If Err = CANCEL Then Exit Sub

If Dialog1.TextBoxTag = Chr$( 024 ) Then Exit Sub

' If carriage returns were not found, the string to paste is "TempStringSpace."
' Otherwise, a choice must be made between that string and the one containing dashes.

If Dialog1.ChoiceReplace = 0 Then
    TempString$ = TempStringSpace$
  Else
    TempString$ = TempStringDash$
End If

If Dialog1.ChoicePaste = 0 Then

PasteNow:

    Clipboard.Clear
    If CRFound Then
        Clipboard.SetText TempStringSpace$
      Else
        Clipboard.SetText TempString$
    End If
    CS.Paste

' If pasted into an existing field, the delimiter gets mangled by the Windows clipboard.
' To get around this problem, replace the substituted character (159) with the standard
' delimiter (223), and then replace the whole field with the "SetField" command.

    Row% = CS.CursorRow
    If CS.GetFieldLine( Row%, CurrentField$ ) Then
        i = InStr( CurrentField$, DELIMITER_CLIP )
        If i <> 0 Then
            CurrentField$ = Replace( CurrentField$, DELIMITER_OCLC, DELIMITER_CLIP )
            If CS.SetFieldLine( Row%, CurrentField$ ) = FALSE Then Exit Sub
        End If
    End If
    If Col% < 6 Then CS.CursorColumn = Col%
  Else

' If adding a new field, Connexion alters some characters. To get around this problem,
' the string must be massaged and characters, or character combinations, must be
' substituted.

    If Dialog1.TextBoxTag = "" Then
        Tag$ = EMPTY_TAG
      Else
        Tag$ = Dialog1.TextBoxTag
    End If

' If the indicator boxes have been left blank, make each indicator a fill character to
' show that attention is required.

    If Dialog1.TextBoxInd1 = "" Then
        Select Case Tag$
          Case "016", "022", "024", "028", "033", "034", "037", "041", "045", "050", _
               "052", "055", "060", "070", "080", "082", "083", "086", "092", "100", _
               "110", "111", "130", "210", "240", "242", "243", "245", "246", "247", _
               "260", "264", "270", "307", "342", "353", "362", "363", "382", "384", _
               "490", "505", "506", "510", "511", "516", "520", "521", "522", "524", _
               "526", "535", "541", "542", "544", "545", "555", "556", "561", "565", _
               "567", "581", "583", "586", "588", "590", "600", "610", "611", "630", _
               "650", "653", "654", "655", "690", "695", "696", "697", "698", "699", _
               "700", "710", "711", "720", "730", "740", "760", "762", "765", "767", _
               "770", "772", "773", "774", "775", "776", "777", "780", "785", "786", _
               "787", "790", "791", "792", "793", "796", "797", "798", "799", "800", _
               "810", "811", "852", "856", "883", "891", "896", "897", "898", "901", _
               "902", "903", "904", "905", "906", "907", "945", "946", "947", "948", _
               "949", "956", EMPTY_TAG
             INDICATOR_1 = FILL_CHAR
        End Select
      Else
        INDICATOR_1 = Dialog1.TextBoxInd1
    End If
    If Dialog1.TextBoxInd2 = "" Then
        Select Case Tag$
          Case "017", "024", "028", "033", "034", "041", "047", "048", "050", "055", _
               "060", "072", "082", "099", "210", "222", "240", "242", "243", "245", _
               "246", "247", "264", "270", "342", "363", "377", "382", "505", "600", _
               "610", "611", "630", "648", "650", "651", "653", "655", "656", "657", _
               "690", "691", "695", "696", "697", "698", "699", "700", "710", "711", _
               "730", "740", "760", "762", "765", "767", "770", "772", "773", "774", _
               "775", "776", "777", "780", "785", "786", "787", "790", "791", "792", _
               "793", "796", "797", "798", "799", "830", "852", "856", "891", "899", _
               "901", "902", "903", "904", "905", "906", "907", "945", "946", "947", _
               "948", "949", "956", EMPTY_TAG
            INDICATOR_2 = FILL_CHAR
        End Select
      Else
        INDICATOR_2 = Dialog1.TextBoxInd2
    End If

    TempString$ = Convert1252( TempString$ )
    TempString$ = Tag$ & INDICATOR_1 & INDICATOR_2 & TempString$

    If CS.AddField( 1, TempString$ ) = FALSE Then MsgBox "Sorry, could not add field.", CRITICAL_MESSAGE, WaltsMacros$
End If

Done:

End Sub

'****************************************************************************************

Function Convert1252( InputString$ ) As String

' Since Connexion mangles characters when it adds a new field, this function attempts to
' fix that mangling by translating Windows-1252 to MARC21.

Dim CharA%
Dim Character$
Dim CharT$
Dim FixString$

Dim i As Integer

For i = 1 To Len( InputString$ )
  CharT$ = Mid$( InputString$, i, 1 )
  CharA% = Asc( CharT$ )

  Select Case CharA%

    Case 0 To 127
      Character$ = CharT$
    Case 128
      Character$ = Chr$( 160 )
    Case 130
      Character$ = Chr$( 039 )
    Case 131
      Character$ = "f"
    Case 132
      Character$ = Chr$( 034 )
    Case 133
      Character$ = "..."
    Case 138
      Character$ = "S" & Chr$( 233 )
    Case 140
      Character$ = Chr$( 166 )
    Case 142
      Character$ = "Z" & Chr$( 233 )
    Case 154
      Character$ = "s" & Chr$( 233 )
    Case 156
      Character$ = Chr$( 182 )
    Case 158
      Character$ = "z" & Chr$( 233 )
    Case 159
      Character$ = "Y" & Chr$( 232 )
    Case 163
      Character$ = Chr$( 185 )
    Case 169
      Character$ = Chr$( 202 )
    Case 174
      Character$ = Chr$( 170 )
    Case 176
      Character$ = Chr$( 158 )
    Case 177
      Character$ = Chr$( 171 )
    Case 178
      Character$ = Chr$( 130 )
    Case 179
      Character$ = Chr$( 131 )
    Case 185
      Character$ = Chr$( 129 )
    Case 186
      Character$ = Chr$( 158 )
    Case 191
      Character$ = CharT$
    Case 192
      Character$ = "A" & Chr$( 225 )
    Case 193
      Character$ = "A" & Chr$( 226 )
    Case 194
      Character$ = "A" & Chr$( 227 )
    Case 195
      Character$ = "A" & Chr$( 227 )
    Case 196
      Character$ = "A" & Chr$( 227 )
    Case 197
      Character$ = "A" & Chr$( 234 )
    Case 198
      Character$ = Chr$( 165 )
    Case 199
      Character$ = "C" & Chr$( 227 )
    Case 200
      Character$ = "E" & Chr$( 225 )
    Case 201
      Character$ = "E" & Chr$( 226 )
    Case 202
      Character$ = "E" & Chr$( 227 )
    Case 203
      Character$ = "E" & Chr$( 227 )
    Case 204
      Character$ = "I" & Chr$( 225 )
    Case 205
      Character$ = "I" & Chr$( 226 )
    Case 206
      Character$ = "I" & Chr$( 227 )
    Case 207
      Character$ = "I" & Chr$( 227 )
    Case 208
      Character$ = Chr$( 163 )
    Case 209
      Character$ = "N" & Chr$( 227 )
    Case 210
      Character$ = "O" & Chr$( 225 )
    Case 211
      Character$ = "O" & Chr$( 226 )
    Case 212
      Character$ = "O" & Chr$( 227 )
    Case 213
      Character$ = "O" & Chr$( 227 )
    Case 214
      Character$ = "O" & Chr$( 227 )
    Case 215
      Character$ = FILL_CHAR
    Case 216
      Character$ = "O"  & Chr$( 162 )
    Case 217
      Character$ = "U" & Chr$( 225 )
    Case 218
      Character$ = "U" & Chr$( 226 )
    Case 219
      Character$ = "U" & Chr$( 227 )
    Case 220
      Character$ = "U" & Chr$( 227 )
    Case 221
      Character$ = "Y" & Chr$( 226 )
    Case 222
      Character$ = Chr$( 164 )
    Case 223
      If Character$ = " " Or i = 1 Then
          Character$ = CharT$
        Else
          Character$ = Chr$( 159 )
      End If
    Case 224
      Character$ = "a" & Chr$( 225 )
    Case 225
      Character$ = "a" & Chr$( 226 )
    Case 226
      Character$ = "a" & Chr$( 227 )
    Case 227
      Character$ = "a" & Chr$( 227 )
    Case 228
      Character$ = "a" & Chr$( 227 )
    Case 229
      Character$ = "a" & Chr$( 234 )
    Case 230
      Character$ = Chr$( 181 )
    Case 231
      Character$ = "c" & Chr$( 240 )
    Case 232
      Character$ = "e" & Chr$( 225 )
    Case 233
      Character$ = "e" & Chr$( 226 )
    Case 234
      Character$ = "e" & Chr$( 227 )
    Case 235
      Character$ = "e" & Chr$( 227 )
    Case 236
      Character$ = "i" & Chr$( 225 )
    Case 237
      Character$ = "i" & Chr$( 226 )
    Case 238
      Character$ = "i" & Chr$( 227 )
    Case 239
      Character$ = "i" & Chr$( 227 )
    Case 240
      Character$ = Chr$( 186 )
    Case 241
      Character$ = "n" & Chr$( 227 )
    Case 242
      Character$ = "o" & Chr$( 225 )
    Case 243
      Character$ = "o" & Chr$( 226 )
    Case 244
      Character$ = "o" & Chr$( 227 )
    Case 245
      Character$ = "o" & Chr$( 227 )
    Case 246
      Character$ = "o" & Chr$( 227 )
    Case 247
      Character$ = FILL_CHAR
    Case 248
      Character$ = "o" & Chr$( 178 )
    Case 249
      Character$ = "u" & Chr$( 225 )
    Case 250
      Character$ = "u" & Chr$( 226 )
    Case 251
      Character$ = "u" & Chr$( 227 )
    Case 252
      Character$ = "u" & Chr$( 227 )
    Case 253
      Character$ = "y" & Chr$( 226 )
    Case 254
      Character$ = Chr$( 181 )
    Case 255
      Character$ = "y" & Chr$( 227 )

  End Select

  FixString$ = FixString$ & Character$

Next i

FixString$  = Trim$( FixString$ )
Convert1252 = FixString$

End Function

'****************************************************************************************

Function Replace( InputString$, Replacement$, Remove$ ) As String

' This function replaces the "ToSubtract" string in "InputString" with the "ToAdd"
' string, except in the special case when a delimiter is passed to it. In that case, add
' a space after any subfield code.

Dim Start%

Dim x As Integer

Start% = 1

If Remove$ = DELIMITER_OCLC Then
    Do
      x = InStr( Start%, InputString$, Remove$ )
      If x <> 0 Then
          InputString$ = Left$( InputString$, x + 1 ) & " " & Mid$( InputString$, x + 2 )
      End If
      Start% = x + 2
    Loop Until x = 0
  Else
    Do
      x = InStr( InputString$, Remove$ )
      If x <> 0 Then
          InputString$ = Left$( InputString$, x - 1 ) & Replacement$ & Mid$( InputString$, x + Len( Remove$ ) )
      End If
    Loop Until x = 0
End If

Replace = InputString$

End Function

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SValue& )

' This function sets up the dialog box for choosing whether to add the copied text as a
' string in an existing field or as a new field, and also whether to convert carriage
' returns to spaces or to dashes.

Const CONTROL_CHANGE  As Integer = 2  'The value of the dialog box function parameter "Action%" when a control changes.
Const DISABLED        As Integer = 0  'The value to make a dialog box control disabled.
Const ENABLED         As Integer = 1  'The value to make a dialog box control enabled.
Const FOCUS_CHANGE    As Integer = 4  'The value of the dialog function parameter "Action%" when the control focus changes.
Const INITIALIZE      As Integer = 1  'The value of the dialog box function parameter "Action%" when the dialog box opens.
Const INVISIBLE       As Integer = 0  'The value to make a dialog box control invisible.
Const KEEP_DLG_OPEN   As Integer = -1 'The value of the dialog box function to keep a dialog box open.
Const TEXTBOX_CHANGE  As Integer = 3  'The value of the dialog box function parameter "Action%" when a change is made to to a textbox.
Const VISIBLE         As Integer = 1  'The value to make a dialog box control visible.
Const WARNING_MESSAGE As Integer = 48 'The value to display the "Warning message" icon in a message box.

Dim CleanupText$             : CleanupText$   = "[Tables of contents can be cleaned up with my " & Quote & "ReformatTOCs" & QUOTE & " macro.]"
Dim DelimiterText$           : DelimiterText$ = Chr$( 013) & "[The delimiter will display properly after pasting.]"
Dim PromptString$
Dim PromptTag$               : PromptTag$     = "Text string to add as new " & Tag$ & " field:"

Select Case CursorPosition%

  Case FIELD_BEGIN
    PromptString$ = "Text string to insert into existing field:"

  Case FIELD_MIDDLE
    PromptString$ = "Text string to insert into existing field:"

  Case FIELD_END
    PromptString$ = "Text string to add at end of existing field:"

End Select

Select Case Action%

  Case INITIALIZE

    If Tag$ = "" Then
        If AddFieldDefault Then
            DlgValue   "ChoicePaste",           1
            DlgFocus   "TextBoxTag"
            DlgText    "ConvertedTextBox",      "Text string to add as new field:"
            DisplayString$ = TempStringSpace$
          Else
            DlgValue   "ChoicePaste",           0
            DlgText    "ConvertedTextBox",      PromptString$
            DisplayString$ = TempStringSpace$
        End If
      Else
        DlgFocus   "OptionPasteAsField"
        DlgValue   "ChoicePaste",           1
        DlgText    "ConvertedTextBox",      PromptTag$
        DisplayString$ = TempStringDash$
    End If
    If CRFound = FALSE Then
        DlgEnable  "ConvertQ",              DISABLED
        DlgEnable  "OptionConvertToSpaces", DISABLED
        DlgEnable  "OptionConvertToDashes", DISABLED
        DisplayString$ = TempStringSpace$
    End If
    If DelimFound = TRUE Then
        DlgText    "EndNote",               DelimiterText$
      Else
        DlgVisible "EndNote",               INVISIBLE
    End If
    DlgText    "TextBoxTag",            Tag$
    DlgText    "TextBoxInd1",           INDICATOR_1
    DlgText    "TextBoxInd2",           INDICATOR_2
    If CursorPosition% = FIXED_FIELD Then
        DlgEnable  "OptionPasteAsString",   DISABLED
        DlgValue   "ChoicePaste",           1
        DlgFocus   "TextBoxTag"
    End If
    DlgText "DS", DisplayString$

  Case CONTROL_CHANGE

    Select Case Id$

      Case "OptionPasteAsString"
        DlgValue   "ChoicePaste",           0
        DlgText    "TextBoxInd1",           ""
        DlgText    "TextBoxInd2",           ""
        DlgText    "TextBoxTag",            ""
        INDICATOR_1 = ""
        INDICATOR_2 = ""
        Tag$        = ""
        DlgText    "ConvertedTextBox",      PromptString$
        DisplayString$ = TempStringSpace$
        If DelimFound = TRUE Then
            DlgText    "EndNote",               DelimiterText$
          Else
            DlgVisible "EndNote",               INVISIBLE
        End If

      Case "OptionPasteAsField"
        DlgValue   "ChoicePaste",           1
        DlgText    "ConvertedTextBox",      PromptTag$
        DlgFocus   "TextBoxTag"
        If DelimFound = TRUE Then
            DlgText    "EndNote",               DelimiterText$
          Else
            DlgVisible "EndNote",               INVISIBLE
        End If

      Case "OptionConvertToSpaces"
        DisplayString$ = TempStringSpace$

      Case "OptionConvertToDashes"
        DisplayString$ = TempStringDash$

      Case "TextBoxTag"
        DlgValue   "ChoicePaste",           1

      Case "OK"
        If DlgValue( "ChoicePaste" ) = 1 Then
            If DlgText( "TextBoxTag" ) Like "###" And Val( DlgText( "TextBoxTag" ) ) > 9 Then
                If DlgText( "TextBoxInd1" ) = "" Or DlgText( "TextBoxInd1" ) Like "[ _0-9]" Then
                    If DlgText( "TextBoxInd2" ) = "" Or DlgText( "TextBoxInd2" ) Like "[ _0-9]" Then
                        Exit Function
                      Else
                        MsgBox "Please use only digits or a space (or leave the input box empty) for the indicators!", WARNING_MESSAGE, WaltsMacros$
                        DlgFocus   "TextBoxInd2"
                    End If
                  Else
                    MsgBox "Please use only digits or a space (or leave the input box empty) for the indicators!", WARNING_MESSAGE, WaltsMacros$
                    DlgFocus   "TextBoxInd1"
                End If
              ElseIf DlgText( "TextBoxTag" ) = "" Then
                Exit Function
              Else
                MsgBox "Please enter only three digits for a tag!", WARNING_MESSAGE, WaltsMacros$
                DlgFocus   "TextBoxTag"
            End If
            Dialog1ControlFunction = KEEP_DLG_OPEN
        End If
    End Select

  Case TEXTBOX_CHANGE

    If Id$ = "TextBoxTag" Or Id$ = "TextBoxInd1" Or Id$ = "TextBoxInd2" Then
        DlgValue   "ChoicePaste",           1
        Tag$        = Trim$( DlgText( "TextBoxTag" ) )
        INDICATOR_1 = Trim$( DlgText( "TextBoxInd1" ) )
        INDICATOR_2 = Trim$( DlgText( "TextBoxInd2" ) )
        If Tag$ = "" Then
            DlgText    "ConvertedTextBox",      "Text string to add as new field:"
          Else
'            DlgText    "ConvertedTextBox",      "Text string to add as new " & Tag$ & " field:"
            DisplayString$ = Tag$ & " " & INDICATOR_1 & INDICATOR_2 & " " & TempStringSpace$
                DlgVisible "EndNote",               VISIBLE
'                DlgText    "EndNote",               CleanupText$
            If Tag$ = "505" Then
                DlgText    "TextBoxInd1",           "0"
                DlgVisible "EndNote",               VISIBLE
                DlgText    "EndNote",               CleanupText$
            End If
        End If
    DlgText "DS", DisplayString$
    End If

  Case FOCUS_CHANGE

    If Id$ = "TextBoxTag" Or Id$ = "TextBoxInd1" Or Id$ = "TextBoxInd2" Then
        DlgValue   "ChoicePaste",   1
        Tag$ = Trim$( DlgText( "TextBoxTag" ) )
        If Tag$ = "" Then
            DlgText    "ConvertedTextBox",      "Text string to add as new field:"
          Else
'            DlgText    "ConvertedTextBox",      "Text string to add as new " & Tag$ & " field:"
            If Tag$ = "505" Then
                DlgText    "TextBoxInd1",           "0"
                DlgVisible "EndNote",               VISIBLE
                DlgText    "EndNote",               CleanupText$
            End If
        End If
    End If

End Select

End Function
'97036616
'
'Macro name: PasteUnformattedPlus
'Macro book: C:\Program Files (x86)\OCLC\Connexion\Program\Macros\Extras1.mbk
'Saved: 12/17/2018 9:06:16 AM using "MacroBookInspector" macro by Walter F. Nickeson.
