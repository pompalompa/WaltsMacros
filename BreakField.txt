'MacroName:BreakField.2015.01
'MacroDescription:Breaks a field at the cursor position, moving all subsequent text in
' that field to a new field, with a blank tag, immediately following.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
'
' Last updated: 17 April 2015.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 2.63 and 64-bit Windows 7 Enterprise &
' 64-bit Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: Put the cursor in a variable field at the point where you want to divide
' it and run the macro. The macro cuts the field at the cursor position, adding the cut
' portion as the next field but with a blank tag.
'
' The macro uses the "GetFieldLineUnicode" command to retrieve the field in which the
' cursor is placed. The data preceding the cursor position becomes a replacement field,
' and is put in place with the "SetField" command. The rest of the data becomes a new
' field, and is added with the "AddFieldLine" command at the next line. The new field has
' a blank tag so the appropriate tag can be simply typed in. Fields with non-Latin
' scripts require some calculation to deal with multibyte character encoding.
'****************************************************************************************

Option Explicit

'****************************************************************************************

Sub Main

Const CRITICAL_MESSAGE As Integer = 16  'The value to display a "Critical message" (which includes the red button with
                                        ' a big "X") in a message box; used to report the macro quitting.

Dim CS As Object
Set CS = CreateObject("Connex.Client")

Dim Char$
Dim ChoppedField$
Dim CurrentColumn%
Dim CurrentField$
Dim CurrentRow%
Dim NewField$
Dim Split%
Dim Tag$
Dim TypeOfWindow%
Dim WaltsMacros$             : WaltsMacros$ = "[Walt's macros] Extras1:BreakField"

Dim i As Integer

' Before going any further, make sure the current window is not a list: The macro works
' only in bibliographic or authority records.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 5 To 13, 15 To 16, 21 To 25, 36
    Exit Sub
End Select

CurrentRow%    = CS.CursorRow
CurrentColumn% = CS.CursorColumn

' First check for cursor position: If the column position is less than 6, the cursor is
' not in a variable field; it's either in the fixed field or it's in the tag + indicator
' cells. Either way, there is no string to divide.

If CurrentColumn% < 6 Then Exit Sub

If CS.GetFieldLineUnicode( CurrentRow%, CurrentField$ ) Then

' Second check for cursor position: If the cursor is at the beginning or end of the
' field, there will be no string to divide, so simply stop.

    If CurrentColumn% >= Len( CurrentField$ ) Or CurrentColumn% = 6 Then Exit Sub

    Tag$ = Left$( CurrentField$, 3 )

' If the field does not contain Unicode encoding, then the position in the string at
' which to make the split will be the same as the cursor column position. Otherwise, the
' string's split position will be greater than the cursor column position, as each
' Unicode character is encoded as eight characters. So every Unicode character counts as
' one toward the cursor column position, but its position in the string counts as eight.

    If InStr( CurrentField$, "&#x" ) Then
        i      = 1
        Split% = 1
        Do
          Char$ = Mid$( CurrentField$, i, 3 )
          If Char$ = "&#x" Then
              i = i + 7
          End If
          i      = i + 1
          Split% = Split% + 1
        Loop Until Split% = CurrentColumn%
        Split% = i
      Else
        Split% = CurrentColumn%
    End If

' To add the new field (the second or latter part of the field the cursor is in), the
' macro command requires a tag. But because that tag will disappear to leave a blank
' space ready for typing in the new tag, whatever we label the field is irrelevant.

    NewField$     = "000  " & Trim$( Mid$( CurrentField$, Split% ) )
    ChoppedField$ = Trim$( Left$( CurrentField$, Split% - 1 ) )

' The "SetFieldLine" command replaces the existing field with a new one.

    If CS.SetFieldLine( CurrentRow%, ChoppedField$ ) Then
        If CS.AddFieldLine( CurrentRow% + 1, NewField$ ) = FALSE Then
            MsgBox "Sorry, this macro couldn't break field " & Tag$ & ".", CRITICAL_MESSAGE, WaltsMacros$
            Exit Sub
          Else
            CS.DeleteCurrentWord
        End If
      Else
        MsgBox "Sorry, this macro couldn't break field " & Tag$ & ".", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If
End If

End Sub
'1536903
'
'Macro name: BreakField
'Macro book: C:\Program Files (x86)\OCLC\Connexion\Program\Macros\Extras1.mbk
'Saved: 12/17/2018 9:05:36 AM using "MacroBookInspector" macro by Walter F. Nickeson.
