'MacroName:CutterMaker.2018.01
'MacroDescription:Creates a Cutter for the selected text, with options including fitting
' a number into a range.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
'
' Last updated: 31 May 2018.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 2.63 and 64-bit Windows 7 Enterprise &
' 64-bit Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: Select a text string from which to create a Cutter and run the macro. It
' creates, and puts on the Clipboard for pasting, a two- to four-character LC Cutter
' based on the first characters of the selection (ignoring case, punctuation, and
' diacritics). It can also create a Cutter from that selection to fit into a range of
' numbers, such as is commonly found in the LC classification schedules. For example, if
' the text selected is the word "general," the macro offers the default Cutter "G46";
' and, if needed to fit into the range 8-829 (as in table P-PZ38, for "Autobiography,
' journals, memoirs. By title"), the Cutter offered is "8104." The macro offers shortcuts
' for use with Table P-PZ40. It also can quickly generate a simple number from the
' selection to fit into the range 1-9999. The selection "general" produces this simple
' type of Cutter "4137."
'
' To fit a number into a range, enter up to four digits for each of the limits. If fewer
' than four digits are entered, the macro pads the number for the lower end of the range
' with 0 (zero), and the upper end with 9. For example, entering a range of 1-4 in the
' dialog box will generate a Cutter falling between 1000 and 4999 (see Classification and
' Shelflisting Manual, section G58, "Interpreting the Classification Schedules"). To
' force the number generated to be only up to 4, enter "4000" or "3999" as the upper
' limit.
'
' When generating a Cutter to fit into a range, the macro can include the first letter of
' the selection (if the selection begins with a letter), or it can produce a number
' without letters, as in the example in first paragraph. In that example, the Cutter must
' fit into the range 8-829, and no letter is allowed.
'
' The shortcuts for Table P-PZ40 automatically work within the limits of that table. For
' separate works whose titles begin with the letter "A", the macro squeezes the Cutter
' (with an initial letter) into the range A61-A99... At the other end, titles beginning
' with the letter "Z" are fit into the range Z1-Z4580. Criticism is squeezed into the
' range Z5-Z999, with the letter "Z" prefixed for convenience.
'
' Regular Cutters are generated following LC's published guidelines (see Classification
' and Shelflisting Manual, section G63, "Cutter Numbers"). Fitted Cutters are generated
' using a table of frequency of occurence for letters in English. To get the range into
' which to fit the Cutter, the limits are padded to four digits as explained above, and
' then shrunk slightly to allow for modification at the edges. Thus, although the limits
' of a range might be entered as 1-4, the range in which the macro does its calculation
' is actually 1200-4919, or a span of 3719. The macro uses a table of letter frequency to
' convert the selected text to a number within that span. This is explained more fully
' below in the comments introducing the function "NumberCalc."
'
' It should go without saying that the Cutters produced by the macro are suggestions
' only, and should be rounded up or down or shortened or lengthened as appropriate to fit
' into specific shelflists.
'****************************************************************************************

Option Explicit

Declare Function Digits       ( Numb% )                        As String
Declare Function GetCutter    ( Bot$, Top$, Source$, Longth% ) As String
Declare Function NumberCalc   ( StringToCutter$, RangeSpan% )  As Integer
Declare Function ValidateInput( Box1$, Box2$ )                 As Integer

Declare Function Dialog1ControlFunction( Id$, Action%, SVal& )

Global Const CRITICAL_MESSAGE As Integer = 16 'The value to display a "Critical message" (which includes the red button with
                                              ' a big "X") in a message box; used to report the macro quitting.
Global Const WARNING_MESSAGE  As Integer = 48 'The value to display the "Warning message" icon in a message box.

Global CleanedString$
Global Cutter$
Global CutterString$
Global FirstCutter$
Global NumberResult%
Global WaltsMacros$

'****************************************************************************************

Sub Main

Const CANCEL As Integer = 102 'The value returned by the dialog box when the "Cancel" button is clicked.

Dim CS as Object
Set CS = CreateObject( "Connex.Client" )

Dim CharA%
Dim CharT$
Dim Counter%                 : Counter% = 1
Dim CutterChar1$
Dim CutterChar2%
Dim CutterChar3%
Dim CutterChar4%
Dim FirstChar$
Dim HowTo$
Dim Selection$
Dim Text$

Dim QUOTE As String*1        : QUOTE    = Chr$( 034 )

Dim i As Integer

WaltsMacros$   = "[Walt's macros] Essentials:CutterMaker"

' Begin by checking for selected text.

If CS.GetSelectedText( Selection$ ) = FALSE Then
    MsgBox "Please select text to Cutter!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

' Then check for non-Latin characters!

If Selection$ = "Data contains non-latin script" Then
    MsgBox "Selection contains non-latin script!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

' Build the string on which to Cutter. Convert the selection to uppercase and go through
' it to get the first four letters, discarding punctuation (but stopping at the period,
' considering it to mark the end of the selection) and diacritics and changing some
' special characters to simple ASCII equivalents.

Text$ = Trim$( UCase$( Selection$ ) )

i = 1

Do
  CharT$ = Mid$( Text$, i, 1 )
  CharA% = Asc( CharT$ )
  Select Case CharA%

' If the first digit is a number, it's a special case.

    Case 48 To 57
      If Counter% = 1 Then
          FirstChar$ = CharT$
          CutterString$ = "A" & CharT$
          Counter%      = Counter% + 1 'used to be 2
        Else
          CutterString$ = CutterString$ & CharT$
          Counter%      = Counter% + 1
      End If
    Case 65 to 90                          'Normal A-Z
      CutterString$ = CutterString$ & CharT$
      Counter%      = Counter% + 1
    Case 161, 177                          'Letter "L"
      CutterString$ = CutterString$ & "L"
      Counter%      = Counter% + 1
    Case 162, 172, 178, 188                'Letter "O"
      CutterString$ = CutterString$ & "O"
      Counter%      = Counter% + 1
    Case 163, 164, 179, 180                'Letter "D"
      CutterString$ = CutterString$ & "D"
      Counter%      = Counter% + 1
    Case 165, 181                          'Digraph "AE"
      CutterString$ = CutterString$ & "AE"
      Counter%      = Counter% + 2
    Case 166, 182                          'Digraph "OE"
      CutterString$ = CutterString$ & "OE"
      Counter%      = Counter% + 2
    Case 173, 189                          'Letter "U"
      CutterString$ = CutterString$ & "U"
      Counter%      = Counter% + 1
    Case 184                               'Letter "I"
      CutterString$ = CutterString$ & "I"
      Counter%      = Counter% + 1

' Space or period (full stop): assume that the end of the word has been reached.

    Case 32, 46
      Exit Do

' Ignore all other characters.

    Case Else

  End Select
  i = i + 1

Loop Until Counter% >= 5 Or i > Len( Text$ )

' Since the loop above already starts building a Cutter if the first character is a
' number, the actual string of valid characters must be restored for display.

If FirstChar$ <> "" Then
    CleanedString$ = Mid$( CutterString$, 2 )
  Else
    CleanedString$ = CutterString$
End If

If Len( CutterString$ ) > 1 Then
    CutterChar1$ = Left$( CutterString$, 1 )
    CutterChar2% = Asc( Mid$( CutterString$, 2, 1 ) )

' For a word of only one letter, arbitrarily assign the Cutter "12" to the letter.

  Else
    Cutter$ = CutterString$ & "12"
    GoTo Finish:
End If

If Counter% > 3 Then
    CutterChar3% = Asc( Mid$( CutterString$, 3, 1 ) )
    CutterChar4% = Asc( Right$( CutterString$, 1 ) )
End If

' The first number (the second character) of the Cutter is determined by the first
' character, depending on whether that first character is a vowel, a consonant, or the
' letters Q and S.

Select Case CutterChar1$
  Case "A", "E", "I", "O", "U"
    Select Case CutterChar2%
      Case 48 To 57
        Cutter$ = CutterChar1$ & "1" & Digits$( CutterChar2% )
      Case 65 to 67
        Cutter$ = CutterChar1$ & "2"
      Case 68 to 75
        Cutter$ = CutterChar1$ & "3"
      Case 76 to 77
        Cutter$ = CutterChar1$ & "4"
      Case 78 to 79
        Cutter$ = CutterChar1$ & "5"
      Case 80 to 81
        Cutter$ = CutterChar1$ & "6"
      Case 82
        Cutter$ = CutterChar1$ & "7"
      Case 83 to 84
        Cutter$ = CutterChar1$ & "8"
      Case 85 to 90
        Cutter$ = CutterChar1$ & "9"
    End Select
  Case "S"
    Select Case CutterChar2%
      Case 48 To 57
        Cutter$ = CutterChar1$ & "1" & Digits$( CutterChar2% )
      Case 65 to 66
        Cutter$ = CutterChar1$ & "2"
      Case 67
        If CutterChar3% = 72 Then
            Cutter$ = CutterChar1$ & "3"
            Select Case CutterChar4%
              Case 48 To 57
                Cutter$ = Cutter$ & "1" & Digits$( CutterChar4% )
              Case 65 To 68
                Cutter$ = Cutter$ & "22"
              Case 69 To 72
                Cutter$ = Cutter$ & "24"
              Case 73 To 75
                Cutter$ = Cutter$ & "26"
              Case 76
                Cutter$ = Cutter$ & "28"
              Case 77
                Cutter$ = Cutter$ & "29"
              Case 78
                Cutter$ = Cutter$ & "32"
              Case 79 To 81
                Cutter$ = Cutter$ & "33"
              Case 82 to 84
                Cutter$ = Cutter$ & "35"
              Case 85 to 86
                Cutter$ = Cutter$ & "37"
              Case 87 to 90
                Cutter$ = Cutter$ & "38"
            End Select
        Else
            Cutter$ = CutterChar1$ & "3"
        End If
      Case 68 to 69
        Cutter$ = CutterChar1$ & "4"
      Case 70 to 76
        Cutter$ = CutterChar1$ & "5"
      Case 77 to 82
        Cutter$ = CutterChar1$ & "6"
      Case 83 to 84
        Cutter$ = CutterChar1$ & "7"
      Case 85
        Cutter$ = CutterChar1$ & "8"
      Case 86 to 90
        Cutter$ = CutterChar1$ & "9"
    End Select
  Case "Q"
    If CutterChar2% = 85 Then
        Select Case CutterChar3%
          Case 48 To 57
            Cutter$ = CutterChar1$ & "1" & Digits$( CutterChar3% )
          Case 65 to 68
            Cutter$ = CutterChar1$ & "3"
          Case 69 to 72
            Cutter$ = CutterChar1$ & "4"
          Case 73 to 78
            Cutter$ = CutterChar1$ & "5"
          Case 79 to 81
            Cutter$ = CutterChar1$ & "6"
          Case 82 to 83
            Cutter$ = CutterChar1$ & "7"
          Case 84 to 88
            Cutter$ = CutterChar1$ & "8"
          Case 89 to 90
            Cutter$ = CutterChar1$ & "9"
        End Select
      ElseIf CutterChar2% > 85 Then
        Cutter$ = CutterChar1$ & "9"
        Select Case CutterChar2%
          Case 48 To 57
            Cutter$ = Cutter$ & "1" & Digits$( CutterChar2% )
          Case 65 to 68
            Cutter$ = Cutter$ & "3"
          Case 69 to 72
            Cutter$ = Cutter$ & "4"
          Case 73 to 75
            Cutter$ = Cutter$ & "5"
          Case 76 to 78
            Cutter$ = Cutter$ & "6"
          Case 79 to 81
            Cutter$ = Cutter$ & "7"
          Case 82 to 83
            Cutter$ = Cutter$ & "8"
          Case 84, 86 to 90
            Cutter$ = Cutter$ & "9"
        End Select
      Else
        Cutter$ = CutterChar1$ & "2"
        Select Case CutterChar2%
          Case 48 To 57
            Cutter$ = Cutter$ & "1" & Digits$( CutterChar2% )
          Case 65 to 68
            Cutter$ = Cutter$ & "3"
          Case 69 to 72
            Cutter$ = Cutter$ & "4"
          Case 73 to 75
            Cutter$ = Cutter$ & "5"
          Case 76 to 78
            Cutter$ = Cutter$ & "6"
          Case 79 to 81
            Cutter$ = Cutter$ & "7"
          Case 82 to 83
            Cutter$ = Cutter$ & "8"
          Case 84, 86 to 90
            Cutter$ = Cutter$ & "9"
        End Select
    End If
  Case Else
    Select Case CutterChar2%
      Case 48 To 57
        Cutter$ = CutterChar1$ & "1" & Digits$( CutterChar2% )
      Case 65 to 68
        Cutter$ = CutterChar1$ & "3"
      Case 69 to 72
        Cutter$ = CutterChar1$ & "4"
      Case 73 to 78
        Cutter$ = CutterChar1$ & "5"
      Case 79 to 81
        Cutter$ = CutterChar1$ & "6"
      Case 82 to 84
        Cutter$ = CutterChar1$ & "7"
      Case 85 to 88
        Cutter$ = CutterChar1$ & "8"
      Case 89 to 90
        Cutter$ = CutterChar1$ & "9"
    End Select
End Select

' In this next part, if the word is three characters long, continue by selecting the next
' letter for expansion.

If Counter% > 3 Then
    Select Case CutterChar3%
      Case 48 To 57
        Cutter$ = Cutter$ & Digits$( CutterChar3% )
      Case 65 to 68
        Cutter$ = Cutter$ & "3"
      Case 69 to 72
        Cutter$ = Cutter$ & "4"
      Case 73 to 76
        Cutter$ = Cutter$ & "5"
      Case 77 to 79
        Cutter$ = Cutter$ & "6"
      Case 80 to 83
        Cutter$ = Cutter$ & "7"
      Case 84 to 86
        Cutter$ = Cutter$ & "8"
      Case 87 to 90
        Cutter$ = Cutter$ & "9"
    End Select
End If

Finish:

' With the Cutter generated, display the dialog box, where that Cutter is the default
' option to put on the Clipboard.

Cutter$         = Left$( Cutter$, 4 )
FirstCutter$    = Cutter$
HowTo$          = "* A number in the upper range box of fewer than four digits will be padded with 9s; so e.g. entering an upper range"
HowTo$          = HowTo$ & " of " & QUOTE & "4" & QUOTE & " will allow a Cutter of up to 4999. Enter " & QUOTE & "4000" & QUOTE
HowTo$          = HowTo$ & " to make " & QUOTE & "4" & QUOTE & " the actual upper limit."

Clipboard.Clear

Begin Dialog Dialog1Definition 208, 302, WaltsMacros$, .Dialog1ControlFunction
  PushButton    16,  16, 176, 32, "",                                .ButtonCopy
  PushButton    16,  56,  82, 32, "&Fit into range...",              .ButtonFit
  TextBox       44, 110,  24, 12,                                    .InputBoxLower
  TextBox       80, 110,  24, 12,                                    .InputBoxUpper
  PushButton   110,  56,  82, 32, "&Quickfit...",                    .ButtonQuick
  PushButton   132, 109,  26, 14, "&Reset",                          .ButtonReset
  PushButton    26, 154,  70, 24, "Nu&mbers only",                   .ButtonNumbersOnly
  PushButton   114, 154,  70, 24, "&Initial letter",                 .ButtonLetter1st
  PushButton    26, 110, 156, 28, "",                                .ButtonSeps
  PushButton    26, 148, 156, 28, "",                                .ButtonBiog
  PushButton    26, 210, 156, 28, "",                                .ButtonSimple
  PushButton    64, 264,  80, 24, "Ca&ncel",                         .ButtonCancel
  GroupBox      16,  96, 176, 38, "",                                .CustomRange
  Text          71, 111,   8,  8, "to",                              .To
  GroupBox      16, 140, 176, 48, "Then choose the kind of Cutter:", .CustomChoose
  Text          16, 192, 176, 32, HowTo$,                            .RangeWarn
  GroupBox      16,  96, 176, 92, "From Table P-PZ40...",            .QuickBox1
  GroupBox      16, 196, 176, 54, "Numbers &only...",                .QuickBox2
  CancelButton 1,1,1,1
End Dialog

Dim Dialog1 as Dialog1Definition
On Error Resume Next
Dialog Dialog1
If Error = CANCEL Then Exit Sub

End Sub

'****************************************************************************************

Function GetCutter( Bot$, Top$, Source$, Longth% ) As String

' This function sends the span into which the Cutter must fit, and the selected string,
' to the function "NumberCalc" for calculating the basic Cutter. The number string it
' back is formatted for proper length--three digits when they follow a letter, four
' otherwise.

Const PAD_BOTTOM As Integer = 20   'The value to calculate how much to pad the bottom of a range for expansion.
Const PAD_TOP    As Integer = 50   'The value to calculate how much to pad the top of a range for expansion.

Dim Ceiling%
Dim Floor%
Dim LowerAsNumber%
Dim RawCutter%
Dim Span%
Dim Temp$
Dim UpperAsNumber%

Dim a As Integer

' Turn the input into numbers and away we go!

LowerAsNumber% = Val( Bot$ )
UpperAsNumber% = Val( Top$ )

' The span is the interval between the upper and lower numbers.

Span%          = UpperAsNumber% - LowerAsNumber%

' The "floor" and "ceiling" nudge the ends of the range together a little to allow for
' wiggle room, thus reducing the dimension of the span.

Floor%         = Span% / PAD_BOTTOM
Ceiling%       = Span% / PAD_TOP
Span%          = Span% - Floor% - Ceiling%

' Send the span and the cleaned selection to the function to calculate a number.

RawCutter%     = NumberCalc( Source$, Span% )

' Add the number to the lower end of the range, increased by the floor, to get the
' Cutter.

NumberResult%  = LowerAsNumber% + Floor% + RawCutter%

Temp$          = Trim$( Str$( NumberResult% ) )

If Longth% = 3 Then
    If Right$( Temp$, 1 ) Like "[5-9]" Then
        a = Val( Mid$( Temp$, 3, 1 ) )
        If a < 9 Then
            Temp$ = Left$( Temp$, 2 ) & Trim$( Str$( a ) )
          Else
            Temp$ = Left$( Temp$, 2 ) & "9"
        End If
      Else
        Temp$ = Left$( Temp$, 3 )
    End If
End If

GetCutter         = Temp$

End Function

'****************************************************************************************

Function Digits$( Numb% )

' This function assigns Cutter numbers to strings of digits.

Select Case Numb%
  Case 48
    Digits$ = "2"
  Case 49
    Digits$ = "3"
  Case 50 To 51
    Digits$ = "4"
  Case 52
    Digits$ = "5"
  Case 53
    Digits$ = "6"
  Case 54 To 55
    Digits$ = "7"
  Case 56
    Digits$ = "8"
  Case 57
    Digits$ = "9"
End Select

End Function

'****************************************************************************************

Function NumberCalc( StringToCutter$, RangeSpan% ) As Integer

' This function calculates a base Cutter for the input string by using a table of
' relative frequencies of occurrence of the the letters in the alphabet. (Digits have
' been arbitrarily squeezed in at the beginning of the table.) For example, the
' relative frequency with which the letter "a" appears is 8.167%, that for the letter "b"
' is 1.492%, and so on. The way this table is used by this macro is to consider that
' titles beginning with the letter "a" will on average consist of the first 8,167 of a
' collection of 100,000 titles arranged in alphabetical order (except for a small space
' reserved for digits at the very beginning of the shelves), those beginning with "b"
' will take up the next 1,492, or titles 8,168 to 9,659, and so on. (Letter frequencies
' for beginnings of words differ from those for all occurrences, a distinction ignored in
' this macro.) So a title beginning with the letter "n" will be shelved, so to speak,
' after all the titles beginning with the letters "a" through "m"--a group that accounts
' for 54.055% (or the first 54,055) of all the titles. If there were 5,000 books, this
' title would be shelved in the 337 books whose titles also begin with "n" that are
' shelved between numbers 2703 and 3040. In other words, if the range into which to
' squeeze the Cutter is 5, then an appropriate Cutter for such a title would be between
' 2.70275 and 3.04020. The numbers in the rest of the Cutter depend on what follows the
' letter "n." For the title "new", the letter "e" would be between 16.694% and 29.396% of
' 0.33745. This calculation runs until four digits have been generated. The table of
' letter frequencies was found in Wikipedia, "Letter frequency," viewed 5 May 2010.

Const REDUCER As Long = 100000   'The value to reduce the calculated result to a number less than 10,000.

Dim BaseNumber!
Dim LowerEnd#
Dim LowerEndPrev#
Dim MaxNumber%
Dim MultiplyA As Long
Dim MultiplyB As Long
Dim Range#
Dim UpperEnd#
Dim ZeroCount%

Dim i As Integer

If Len( StringToCutter$ ) < 4 Then
    MaxNumber% = Len( StringToCutter$ )
  Else
    MaxNumber% = 4
End If

Range# = RangeSpan%

For i = 1 To MaxNumber%
  Select Case Mid$( StringToCutter$, i, 1 )
    Case "0"
      MultiplyA =     10
      MultiplyB =     15
    Case "1"
      MultiplyA =     15
      MultiplyB =     20
    Case "2"
      MultiplyA =     20
      MultiplyB =     25
    Case "3"
      MultiplyA =     25
      MultiplyB =     30
    Case "4"
      MultiplyA =     30
      MultiplyB =     35
    Case "5"
      MultiplyA =     35
      MultiplyB =     40
    Case "6"
      MultiplyA =     40
      MultiplyB =     45
    Case "7"
      MultiplyA =     45
      MultiplyB =     50
    Case "8"
      MultiplyA =     50
      MultiplyB =     55
    Case "9"
      MultiplyA =     55
      MultiplyB =     60
    Case "A"              ' 8.167%
      MultiplyA =     60
      MultiplyB =   8167
    Case "B"              ' 1.492%
      MultiplyA =   8167
      MultiplyB =   9659
    Case "C"              ' 2.782%
      MultiplyA =   9659
      MultiplyB =  12441
    Case "D"              ' 4.253%
      MultiplyA =  12441
      MultiplyB =  16694
    Case "E"              '12.702%
      MultiplyA =  16694
      MultiplyB =  29396
    Case "F"              ' 2.228%
      MultiplyA =  29396
      MultiplyB =  31624
    Case "G"              ' 2.015%
      MultiplyA =  31624
      MultiplyB =  33639
    Case "H"              ' 6.094%
      MultiplyA =  33639
      MultiplyB =  39733
    Case "I"              ' 6.966%
      MultiplyA =  39733
      MultiplyB =  46699
    Case "J"              ' 0.153%
      MultiplyA =  46699
      MultiplyB =  46852
    Case "K"              ' 0.772%
      MultiplyA =  46852
      MultiplyB =  47624
    Case "L"              ' 4.025%
      MultiplyA =  47624
      MultiplyB =  51649
    Case "M"              ' 2.406%
      MultiplyA =  51649
      MultiplyB =  54055
    Case "N"              ' 6.749%
      MultiplyA =  54055
      MultiplyB =  60804
    Case "O"              ' 7.507%
      MultiplyA =  60804
      MultiplyB =  68311
    Case "P"              ' 1.929%
      MultiplyA =  68311
      MultiplyB =  70240
    Case "Q"              ' 0.095%
      MultiplyA =  70240
      MultiplyB =  70335
    Case "R"              ' 5.987%
      MultiplyA =  70335
      MultiplyB =  76322
    Case "S"              ' 6.327%
      MultiplyA =  76322
      MultiplyB =  82649
    Case "T"              ' 9.056%
      MultiplyA =  82649
      MultiplyB =  91705
    Case "U"              ' 2.758%
      MultiplyA =  91705
      MultiplyB =  94463
    Case "V"              ' 0.978%
      MultiplyA =  94463
      MultiplyB =  95441
    Case "W"              ' 2.360%
      MultiplyA =  95441
      MultiplyB =  97801
    Case "X"              ' 0.150%
      MultiplyA =  97801
      MultiplyB =  97951
    Case "Y"              ' 1.974%
      MultiplyA =  97951
      MultiplyB =  99925
    Case "Z"              ' 0.074%
      MultiplyA =  99925
      MultiplyB = 100000
  End Select

' For whatever range is being considered, the table gives a lower and upper limit of the
' space within the range taken up by the letter; the range will be further reduced by the
' limits of the next letter.

  LowerEnd# = Int( Range# * MultiplyA )
  UpperEnd# = Int( Range# * MultiplyB )
  If i > 1 Then
      LowerEnd# = Int( LowerEnd# / REDUCER )
      UpperEnd# = Int( UpperEnd# / REDUCER )
  End If
  If LowerEndPrev# = 0 Then
      If LowerEnd# = 0 Then
          ZeroCount% = ZeroCount% + 1
        Else
          LowerEndPrev# = 1
      End If
  End If
  BaseNumber!   = BaseNumber! + LowerEnd#
  Range#        = UpperEnd# - LowerEnd#
  LowerEndPrev# = LowerEnd#

Next i

NumberCalc = BaseNumber! / REDUCER

End Function

'****************************************************************************************

Function ValidateInput( Box1Str$, Box2Str$ ) As Integer

' This function ensures correct input: Numbers in both boxes, digits only, and the lower
' end of the range less than the upper end.

Const MAXLEN As Integer = 4

Dim Box1Num%
Dim Box2Num%
Dim CharT$
Dim LenBox1%
Dim LenBox2%

Dim i As Integer

LenBox1% = Len( Box1Str$ )
LenBox2% = Len( Box2Str$ )

' First check that both input boxes for the range are not empty.

If Box1Str$ = "" Or Box2Str$ = "" Then
    ValidateInput = 1
    Exit Function
End If

' Continue by making sure only numbers have been input, lower end first.

For i = 1 To LenBox1%
  CharT$ = Mid$( Box1Str$, i, 1 )
  If CharT$ Like "[!0-9]" Then
      ValidateInput = 2
      Exit Function
      Exit For
  End If
Next i

' If the number input for the lower end of the range is less than 4 digits, pad it to 4
' with trailing zeroes.

If LenBox1% < MAXLEN Then
    Box1Str$ = Box1Str$ & String$( MAXLEN - LenBox1%, "0" )
End If
Box1Num% = Val( Box1Str$ )

' Zero can't begin the range!

If Box1Num% = 0 Then
    ValidateInput = 3
    Exit Function
End If

' Next check the upper end of the range for numeric input.

For i = 1 To LenBox2%
  CharT$ = Mid$( Box2Str$, i, 1 )
  If CharT$ Like "[!0-9]" Then
      ValidateInput = 2
      Exit Function
      Exit For
  End If
Next i

' If a valid upper end of the range is input, make it 4 digits, if necessary, by padding
' it with nines.

If LenBox2% < MAXLEN Then
    Box2Str$ = Box2Str$ & String$( MAXLEN - LenBox2%, "9" )
End If
Box2Num% = Val( Box2Str$ )

' Finally, make sure the numbers represent a range--i.e., that the upper end is greater
' than the lower end. This will catch a zero input for the upper end.

If Box1Num% >= Box2Num% Then
    ValidateInput = 4
    Exit Function
End If

End Function

'****************************************************************************************

Function Dialog1ControlFunction( Id$, Action%, SValue& )

' This function controls the dialog box. It sends the input to the proper function to
' perform the calculation, offers the choices to accept the simple Cutter or one fit into
' a range, displays the result, and copies it to the clipboard.

Const CONTROL_CHANGE   As Integer = 2   'The value of a dialog box control change (button clicked or option button chosen).
Const DISABLED         As Integer = 0   'The value to make a dialog box control disabled.
Const ENABLED          As Integer = 1   'The value to make a dialog box control enabled.
Const INITIALIZE       As Integer = 1   'The value of the dialog box function parameter "Action%" when the dialog box opens.
Const INVISIBLE        As Integer = 0   'The value to make a dialog box control invisible.
Const KEEP_DLG_OPEN    As Integer = -1  'The value of the dialog box function to keep a dialog box open.
Const TEXTBOX_CHANGE   As Integer = 3   'The value of the dialog box function parameter "Action%" when a change is made to to a textbox.
Const VISIBLE          As Integer = 1   'The value to make a dialog box control visible.

Dim CutterBegin$
Dim ErrCode%
Dim InputStringLower$
Dim InputStringUpper$

Dim i As Integer, p As Integer, q As Integer

Dim Errors( 4 ) As String
Errors( 0 ) = ""
Errors( 1 ) = "Please enter values for the ends of the range!"
Errors( 2 ) = "Please input only numbers for the range!"
Errors( 3 ) = "The beginning of a range must be at least 1!"
Errors( 4 ) = "The lower end of the range is greater than the upper end! That won't work."

Select Case Action%

  Case INITIALIZE

' When the dialog box opens, the default action is to show the calculated Cutter;
' everything else is hidden (except for the choice to fit the Cutter into a range).

    DlgVisible "ButtonBiog",        INVISIBLE
    DlgEnable  "ButtonCopy",        ENABLED
    DlgText    "ButtonCopy",        "Copy to Clipboard: " & FirstCutter$
    DlgFocus   "ButtonCopy"
    DlgEnable  "ButtonFit",         ENABLED
    DlgVisible "ButtonLetter1st",   INVISIBLE
    DlgVisible "ButtonNumbersOnly", INVISIBLE
    DlgVisible "ButtonReset",       INVISIBLE
    DlgVisible "ButtonSeps",        INVISIBLE
    DlgVisible "ButtonSimple",      INVISIBLE
    DlgVisible "Cancel",            INVISIBLE
    DlgVisible "CustomChoose",      INVISIBLE
    DlgVisible "CustomRange",       INVISIBLE
    DlgText    "CustomRange",       "Enter the range into which to fit the Cutter (1-4 digits):"
    DlgVisible "InputBoxLower",     INVISIBLE
    DlgVisible "InputBoxUpper",     INVISIBLE
    DlgVisible "QuickBox1",         INVISIBLE
    DlgVisible "QuickBox2",         INVISIBLE
    DlgVisible "RangeWarn",         INVISIBLE
    DlgVisible "To",                INVISIBLE

BeginAgain:

  Case CONTROL_CHANGE
    Select Case Id$

      Case "ButtonBiog"
        Cutter$ = DlgText( "ButtonBiog" )
        q       = InStr( Cutter$, ":" )
        Cutter$ = Trim$( Mid$( Cutter$, q + 1 ) )
        Clipboard.SetText Cutter$
        Exit Function

      Case "ButtonCopy"
        Clipboard.SetText Cutter$
        Exit Function

      Case "ButtonFit"
        DlgVisible "ButtonBiog",        INVISIBLE
        DlgEnable  "ButtonCopy",        DISABLED
        DlgVisible "ButtonLetter1st",   INVISIBLE
        DlgVisible "ButtonNumbersOnly", INVISIBLE
        DlgEnable  "ButtonQuick",       DISABLED
        DlgVisible "ButtonReset",       VISIBLE
        DlgVisible "ButtonSeps",        INVISIBLE
        DlgVisible "ButtonSimple",      INVISIBLE
        DlgVisible "CustomChoose",      INVISIBLE
        DlgVisible "CustomRange",       VISIBLE
        DlgVisible "InputBoxLower",     VISIBLE
        DlgFocus   "InputBoxLower"
        DlgVisible "InputBoxUpper",     VISIBLE
        DlgVisible "QuickBox1",         INVISIBLE
        DlgVisible "QuickBox2",         INVISIBLE
        DlgVisible "RangeWarn",         VISIBLE
        DlgVisible "To",                VISIBLE
        Select Case Left$( CleanedString$, 1 )
          Case "A"
            Cutter$ = "A" & GetCutter( "6100", "9999", Mid$( CleanedString$, 2 ), 3 )
          Case "Z"
            Cutter$ = "Z" & GetCutter( "1000", "4589", Mid$( CleanedString$, 2 ), 3 )
        End Select
        Dialog1ControlFunction = KEEP_DLG_OPEN

      Case "ButtonLetter1st", "ButtonNumbersOnly"

' The first step is to get and validate the input. If there is no entry, invalid entry
' (e.g., any characters other than digits), or bad entry (an upper limit less than the
' lower limit), display an error message and keep the dialog box open to correct the
' problem.

        InputStringLower$ = Trim$( DlgText( "InputBoxLower" ) )
        InputStringUpper$ = Trim$( DlgText( "InputBoxUpper" ) )
        ErrCode%          = ValidateInput( InputStringLower$, InputStringUpper$ )
        If ErrCode% > 0 Then
            MsgBox Errors( ErrCode% ), WARNING_MESSAGE, WaltsMacros$
            Dialog1ControlFunction = KEEP_DLG_OPEN
            DlgFocus   "InputBoxLower"
            SendKeys "+{HOME}"               'Selects the lower end input for easy replacement
            GoTo BeginAgain:
        End If

        If Id$ = "ButtonNumbersOnly" Then
            Cutter = GetCutter( InputStringLower$, InputStringUpper$, CleanedString$, 4 )
          ElseIf Id$ = "ButtonLetter1st" Then
            Cutter = Left$( CleanedString$, 1 ) & GetCutter( InputStringLower$, InputStringUpper$, Mid$( CleanedString$, 2 ), 3 )
        End If

        DlgEnable  "ButtonCopy",        ENABLED
        DlgText    "ButtonCopy",        "Copy to Clipboard: " & Cutter$
        DlgFocus   "ButtonCopy"
        DlgEnable  "ButtonFit",         DISABLED
        DlgEnable  "ButtonLetter1st",   DISABLED
        DlgEnable  "ButtonNumbersOnly", DISABLED
        DlgEnable  "CustomChoose",      DISABLED
        DlgEnable  "RangeWarn",         ENABLED
        Dialog1ControlFunction = KEEP_DLG_OPEN

      Case "ButtonQuick"
        DlgVisible "ButtonBiog",        VISIBLE
        DlgEnable  "ButtonCopy",        DISABLED
        DlgEnable  "ButtonFit",         DISABLED
        DlgVisible "ButtonLetter1st",   INVISIBLE
        DlgVisible "ButtonNumbersOnly", INVISIBLE
        DlgEnable  "ButtonQuick",       DISABLED
        DlgVisible "ButtonReset",       INVISIBLE
        DlgVisible "ButtonSeps",        VISIBLE
        DlgVisible "ButtonSimple",      VISIBLE
        DlgVisible "CustomChoose",      INVISIBLE
        DlgVisible "CustomRange",       INVISIBLE
        DlgVisible "InputBoxLower",     INVISIBLE
        DlgVisible "InputBoxUpper",     INVISIBLE
        DlgVisible "QuickBox1",         VISIBLE
        DlgVisible "QuickBox2",         VISIBLE
        DlgVisible "RangeWarn",         INVISIBLE
        DlgVisible "To",                INVISIBLE
        Select Case Left$( CleanedString$, 1 )
          Case "A"
            Cutter$ = "A" & GetCutter( "6100", "9999", Mid$( CleanedString$, 2 ), 3 )
          Case "Z"
            Cutter$ = "Z" & GetCutter( "1000", "4589", Mid$( CleanedString$, 2 ), 3 )
        End Select
        DlgEnable  "ButtonSeps",        ENABLED
        DlgText    "ButtonSeps",        "&Separate works (A61-Z458): " & Cutter$
        Cutter$       = "Z" & Left$( GetCutter( "5000", "9999", CleanedString$, 3 ), 3 )
        DlgEnable  "ButtonBiog",        ENABLED
        DlgText    "ButtonBiog",        "&Biography and criticism (Z5-Z999): " & Cutter$
        Cutter$       = GetCutter( "1000", "9999", CleanedString$, 4 )
        DlgEnable  "ButtonSimple",      ENABLED
        DlgText    "ButtonSimple",      Cutter$
        Dialog1ControlFunction = KEEP_DLG_OPEN

      Case "ButtonReset"
        DlgEnable  "ButtonCopy",        DISABLED
        DlgVisible "ButtonLetter1st",   INVISIBLE
        DlgVisible "ButtonNumbersOnly", INVISIBLE
        DlgVisible "CustomChoose",      INVISIBLE
        DlgFocus   "CustomRange"
        DlgText    "InputBoxLower",     ""
        DlgFocus   "InputBoxLower"
        DlgText    "InputBoxUpper",     ""
        DlgVisible "RangeWarn",         INVISIBLE
        Dialog1ControlFunction = KEEP_DLG_OPEN

      Case "ButtonSeps"
        Cutter$ = DlgText( "ButtonSeps" )
        q       = InStr( Cutter$, ":" )
        Cutter$ = Trim$( Mid$( Cutter$, q + 1 ) )
        Clipboard.SetText Cutter$
        Exit Function

      Case "ButtonSimple"
        Cutter$ = DlgText( "ButtonSimple" )
        Clipboard.SetText Cutter$
        Exit Function

    End Select

  Case TEXTBOX_CHANGE

    DlgVisible "ButtonBiog",        INVISIBLE
    DlgVisible "ButtonLetter1st",   VISIBLE
    DlgVisible "ButtonNumbersOnly", VISIBLE
    If Left$( CleanedString$, 1 ) Like "[A-Z]" Then
        DlgEnable  "ButtonLetter1st",   ENABLED
        DlgEnable  "ButtonNumbersOnly", ENABLED
      Else
        DlgEnable  "ButtonLetter1st",   DISABLED
        DlgEnable  "ButtonNumbersOnly", ENABLED
    End If
    If Len( CleanedString$ ) = 1 Then
        DlgEnable  "ButtonLetter1st",   DISABLED
        DlgEnable  "ButtonNumbersOnly", ENABLED
      Else
        DlgEnable  "ButtonLetter1st",   ENABLED
        DlgEnable  "ButtonNumbersOnly", ENABLED
    End If
    DlgVisible "ButtonReset",       VISIBLE
    DlgVisible "ButtonSeps",        INVISIBLE
    DlgVisible "ButtonSimple",      INVISIBLE
    DlgVisible "CustomChoose",      VISIBLE
    DlgEnable  "CustomChoose",      ENABLED
    DlgVisible "QuickBox1",         INVISIBLE
    DlgVisible "QuickBox2",         INVISIBLE
    DlgVisible "RangeWarn",         VISIBLE

End Select

End Function
'105038919
'
'Macro name: CutterMaker
'Macro book: C:\Program Files (x86)\OCLC\Connexion\Program\Macros\Essentials.mbk
'Saved: 12/17/2018 9:01:19 AM using "MacroBookInspector" macro by Walter F. Nickeson.
