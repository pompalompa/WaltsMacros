'MacroName:DeriveBookFromAnyFormat.2016.17
'MacroDescription:Derives a new record for a book from a bibliographic record of any
' format.

' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
'
' Last updated: 2 September 2016.
' Check for the latest versions of this and my other macros at
' https://github.com/wnickeson/WaltsMacros
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 2.63 and 64-bit Windows 7 Enterprise &
' 64-bit Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works. Run the macro in a bibliographic record for something other than a book
' (that is, something that is not monographic printed language material) to derive an
' RDA (ISBD) record for a book manifestation of the work. Choose whether to derive a new
' record from the existing one, or to keep and adapt the existing record. In either case,
' the macro helps in editing by removing fields inappropriate or irrelevant for
' describing books. Use this macro in those instances in which a record for a book is
' required, and a record already exists in some other format (such as a microform, an
' electronic resource, or a sound recording) that has so much relevant information that
' it would be easier to tweak the record than to enter the data all over again.
'
' Bibliographic Formats and Standards addresses the issue of making a new record because
' of disagreement with the record's format: "A record cataloged on an incorrect workform
' does not justify a new record. Edit the record for local use and report Type code
' errors to OCLC so the master record can be changed." This macro helps with editing the
' record for local use, but also when creating a new record is justified.
'
' The macro strips all fields with tags below 033, removes a GMD from the 245 field, and
' deletes 7XX linking fields. It deletes incorrect format-specific fields, such as 047
' (Form of Musical Composition Code), 310 (Current Publication Frequency), 346 (Video
' Characteristics), 382 (Medium of Performance), 538 (System Details Note), etc. General
' notes (in 500 fields) are retained, but because they may be completely inappropriate
' for a book, they should be carefully reviewed. FAST subject headings are deleted, as
' are some form subject subdivisions for non-book materials, such as "Periodicals,"
' "Maps," and "Scores" and "Parts." An 856 field for an internet resource has its second
' indicator changed to "1" for "Version of resource." Some edits are made to the fixed
' field in addition to changing "Type"--for example, "Form" is always made blank. The 33X
' fields for an unmediated textual resource whose carrier is "volume" are added (with a
' fill character in the 338 field as a reminder to verify the type of carrier--the macro
' can't tell, for example, if "sheet" is actually the correct term). If information is
' lacking in the original record (such as the fixed field codes for illustrations,
' irrelevant for a sound recording, for example), the default books workform values will
' appear. A books 006 field will be deleted, but mined for fixed field information.
'
' If a record is simply to be edited, the macro uses the "ChangeRecordType" command to
' change the value of "Type", unless the record is already for printed material, such as
' a serial, or microform. Irrelevant fields are deleted. If a new record is required, the
' macro opens a books workform and pastes into it relevant fields copied from the
' existing record. While the macro command "DeriveNewRecord" may seem to be a more
' appropriate tool, what variable fields it copies depends upon the user's settings
' (under the menu hierarchy "Tools > Options"). This macro's operation bypasses those
' settings. For example, the default settings for deriving a record only transfers
' fields 1XX-8XX. But the original record may have important or useful information in
' some 0XX fields that should be in the new record, such as that in 043 and 050. If the
' default settings for deriving a record have never been changed, that information would
' have to be re-entered.
'****************************************************************************************

Option Explicit
Option Compare Text

'****************************************************************************************

Sub Main

Const BOOK_RECORD_TYPE                As Integer = 0   'The value in the "ChangeRecordType" command to change the record's format to Books.
Const CRITICAL_MESSAGE                As Integer = 16  'The value to display a "Critical message" (which includes the red button with
                                                       ' a big "X") in a message box; used to report the macro quitting.
Const DISPLAY_FF_AT_TOP               As Integer = 1   'The value to display the fixed field at the top of a record.
Const MSGBOX_RETURN_CANCEL            As Integer = 2   'The value returned by a message box when the "Cancel" button is clicked.
Const MSGBOX_RETURN_YES               As Integer = 6   'The value returned by a message box when the "Yes" button is clicked.
Const MSGBOX_SETBUTTONS_YES_NO_CANCEL As Integer = 3   'The value to set three buttons, "Yes," "No," and "Cancel," in a message box.
Const WARNING_MESSAGE                 As Integer = 48  'The value to display the "Warning message" icon in a message box.
Const WARNING_QUERY                   As Integer = 32  'The value to display the "Warning query" icon in a message box.

Dim CS As Object
Set CS = CreateObject("Connex.Client")

Dim DELIMITER                : DELIMITER     = Chr$( 223 )
Dim FILL_CHAR                : FILL_CHAR     = Chr$( 252 )

Dim Answer%
Dim Audn$
Dim Biog$
Dim BLvl$
Dim CarrierType$             : CarrierType$  = "338" &  FILL_CHAR & " volume " & DELIMITER & "b nc " & DELIMITER & "2 rdacarrier"
Dim CharT$
Dim Conf$
Dim Cont$
Dim ContentType$             : ContentType$  = "336  text " & DELIMITER & "b txt " & DELIMITER & "2 rdacontent"
Dim CopiedFieldCount%
Dim Ctrl$
Dim Ctry$
Dim Dates1$
Dim Dates2$
Dim DtSt$
Dim Extent$
Dim Fest$
Dim FieldData$
Dim Form$
Dim GPub$
Dim Ills$
Dim Indx$
Dim Lang$
Dim LineNumber%
Dim LitF$
Dim MediaType$               : MediaType$    = "337  unmediated " & DELIMITER & "b n " & DELIMITER & "2 rdamedia"
Dim MRec$
Dim NewAudn$
Dim NewBiog$
Dim NewConf$
Dim NewCont$
Dim NewCtrl$
Dim NewCtry$
Dim NewDates1$
Dim NewDates2$
Dim NewDtSt$
Dim NewFest$
Dim NewGPub$
Dim NewIlls$
Dim NewIndx$
Dim NewLang$
Dim NewLitF$
Dim NewMRec$
Dim PosFF%
Dim PosSubfC%
Dim Tag%
Dim TypeOfRecord$
Dim TypeOfWindow%
Dim WaltsMacros$             : WaltsMacros$  = "[Walt's macros] Extras2:DeriveBookFromAnyFormat"
Dim [006Code] As String

Dim AddProblem               : AddProblem    = FALSE
Dim Book33X                  : Book33X       = FALSE
Dim ChangedFFView
Dim DeleteProblem            : DeleteProblem = FALSE
Dim FFGet
Dim FFSet
Dim FoundField               : FoundField    = TRUE
Dim KeepField
Dim NewRecord
Dim VFSet

Dim i As Integer, p As Integer, q As Integer

Dim Fields() As String

' First, make sure that a bibliographic record is open.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 3 To 16, 18, 20 To 36
    MsgBox "This macro only works in bibliographic records!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

' Then get certain fixed field values, to determine whether to continue.

PosFF% = CS.FixedFieldPosition
If PosFF% <> DISPLAY_FF_AT_TOP Then
    CS.FixedFieldPosition = DISPLAY_FF_AT_TOP
    ChangedFFView         = TRUE
End If

FFGet = CS.GetFixedField( "BLvl", BLvl$ )
FFGet = CS.GetFixedField( "Form", Form$ )
FFGet = CS.GetFixedField( "Type", TypeOfRecord$ )

' If the record already describes a book, exit the macro. If it describes non-book
' printed material (e.g., a serial, or a microform), get the fixed field values
' applicable to monographs to copy to the new record.

If TypeOfRecord$ = "a" And BLvl$ = "m" And Form$ = "" Then
    MsgBox "This record already describes a book!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

' Get the rest of the fixed field values, if any. If unavailable, set the values as
' workform defaults.

FFGet = CS.GetFixedField( ",",     Dates2$ )
FFGet = CS.GetFixedField( "Audn",  Audn$ )
FFGet = CS.GetFixedField( "Biog",  Biog$ )
FFGet = CS.GetFixedField( "Conf",  Conf$ )   : If Conf$   = "" Then Conf$   = "0"
FFGet = CS.GetFixedField( "Cont",  Cont$ )
FFGet = CS.GetFixedField( "Ctrl",  Ctrl$ )
FFGet = CS.GetFixedField( "Ctry",  Ctry$ )   : If Ctry$   = "" Then Ctry$   = FILL_CHAR & FILL_CHAR & FILL_CHAR
FFGet = CS.GetFixedField( "Dates", Dates1$ ) : If Dates1$ = "" Then Dates1$ = FILL_CHAR & FILL_CHAR & FILL_CHAR & FILL_CHAR
FFGet = CS.GetFixedField( "DtSt",  DtSt$ )   : If DtSt$   = "" Then DtSt$   = FILL_CHAR
FFGet = CS.GetFixedField( "Fest",  Fest$ )   : If Fest$   = "" Then Fest$   = "0"
FFGet = CS.GetFixedField( "GPub",  GPub$ )
FFGet = CS.GetFixedField( "Ills",  Ills$ )
FFGet = CS.GetFixedField( "Indx",  Indx$ )   : If Indx$   = "" Then Indx$   = "0"
FFGet = CS.GetFixedField( "Lang",  Lang$ )   : If Lang$   = "" Then Lang$   = FILL_CHAR & FILL_CHAR & FILL_CHAR
FFGet = CS.GetFixedField( "LitF",  LitF$ )   : If LitF$   = "" Then LitF$   = "0"
FFGet = CS.GetFixedField( "MRec",  MRec$ )

If ChangedFFView Then CS.FixedFieldPosition = PosFF%

' Finally, determine whether to make a new record, as opposed to simply changing the
' format for local use.

Answer% = MsgBox( "Derive new record in books format?", MSGBOX_SETBUTTONS_YES_NO_CANCEL + WARNING_QUERY, WaltsMacros$ )

Select Case Answer%

  Case MSGBOX_RETURN_CANCEL

    Exit Sub

  Case Else

    If Answer% = MSGBOX_RETURN_YES Then
        NewRecord = TRUE
      Else
        NewRecord = FALSE

' If a new record is not desired, use the macro command to change the Type of record.
' Otherwise, the Workform command will be used later to create a blank record into which
' to paste relevant fields.

        If CS.ChangeRecordType( BOOK_RECORD_TYPE ) = FALSE Then
            MsgBox "Sorry, couldn't change format of record.", CRITICAL_MESSAGE, WaltsMacros$
            Exit Sub
        End If
    End If

End Select

' Go through the record, field by field, evaluating each one for relevancy for books.

LineNumber%       = 1
CopiedFieldCount% = 0
Do
  FoundField = CS.GetFieldLineUnicode( LineNumber%, FieldData$ )
  If FoundField Then
      Tag% = Val( Left$( FieldData$, 3 ) )

      Select Case Tag% 'These are the fields to keep.

        Case 6, 33, 41, 43 To 46, 50, 66, 80, 82, 89, 90, _ 'These are the tags to keep.
             100 To 130, _
             240 To 250, 260, 264 To 270, _
             300, 336 To 338, 340, 377, 380 To 381, 385 To 386, _
             490, _
             500 To 506, 510, 513, 520 To 521, 525 To 526, 530, 534 To 536, 540, 542, 544 To 546, 550, 556, 563, 565, 567, 585, 586, _
             600 To 699, _
             752, 754, _
             800 To 830, 856

           KeepField = TRUE

' Some fields require special treatment.

          Select Case Tag%

' From the 245 field, remove a GMD in subfield $h.

            Case 6
              If Mid$( FieldData$, 6, 1 ) = "a" Then
                  [006Code] = Mid$( FieldData$, 7, 4 )
                  If Trim$( [006Code] ) <> "" Then Ills$ = [006Code]
                  [006Code] = Trim$( Mid$( FieldData$, 11, 1 ) )
                  If [006Code] <> "" Then Audn$ = [006Code]
                  [006Code] = Mid$( FieldData$, 13, 4 )
                  If Trim$( [006Code] ) <> "" Then Cont$ = [006Code]
                  [006Code] = Trim$( Mid$( FieldData$, 17, 1 ) )
                  If [006Code] <> "" Then GPub$ = [006Code]
                  [006Code] = Trim$( Mid$( FieldData$, 18, 1 ) )
                  If [006Code] <> "" Then Conf$ = [006Code]
                  [006Code] = Trim$( Mid$( FieldData$, 19, 1 ) )
                  If [006Code] <> "" Then Fest$ = [006Code]
                  [006Code] = Trim$( Mid$( FieldData$, 20, 1 ) )
                  If [006Code] <> "" Then Indx$ = [006Code]
                  [006Code] = Trim$( Mid$( FieldData$, 22, 1 ) )
                  If [006Code] <> "" Then LitF$ = [006Code]
                  [006Code] = Trim$( Mid$( FieldData$, 23, 1 ) )
                  If [006Code] <> "" Then Biog$ = [006Code]
              End If
              KeepField = FALSE

            Case 245
              p = InStr( FieldData$, DELIMITER & "h" )
              If p <> 0 Then
                  q = InStr( p + 1, FieldData$, DELIMITER )
                  If q <> 0 Then
                      For i = q To 1 Step -1
                        CharT$ = Mid$( FieldData$, i, 1 )
                        If CharT$ = "]" Then
                            q = i + 1
                            Exit For
                        End If
                      Next i
                      FieldData$ = Left$( FieldData$, p - 1 ) & Mid$( FieldData$, q + 1 )
                    Else
                      FieldData$ = Left$( FieldData$, p - 1 )
                  End If
              End If

' Change a 260 field to a 264 field and add a fill character in the second indicator
' position so it gets corrected.

            Case 260
              FieldData$ = "264 " & FILL_CHAR & Mid$( FieldData$, 6 )

' An extent statement for something other than books will of course not be appropriate
' for a record for a book, so if such is found, substitute a warning. An extent statement
' for a book, but described as an online resource, will be modified somewhat and the
' warning to supply dimensions added. A warning is accompanied by a fill character in the
' first indicator position, which won't validate, thus requiring correction.

            Case 300
              If TypeOfRecord$ <> "a" Then
                  p = InStr( 7, FieldData$, DELIMITER )
                  If p <> 0 Then
                      Extent$ = Mid$( FieldData$, 7, p - 7 )
                      If InStr( Extent$, "p." )     = 0 And _
                         InStr( Extent$, "pages" )  = 0 And _
                         InStr( Extent$, "v." )     = 0 And _
                         InStr( Extent$, "vol." )   = 0 And _
                         InStr( Extent$, "volume" ) = 0 Then
                          FieldData$ = "300" & FILL_CHAR & " ADD EXTENT AND DIMENSIONS"
                      End If
                  End If
                Else
                  If Form$ <> "" Then
                      If Mid$( FieldData$, 6, 19 ) = "1 online resource (" Then
                          FieldData$ = Left$( FieldData$, 5 ) & Mid$( FieldData$, 25 )
                      End If
                      If InStr( FieldData$, DELIMITER & "c" ) = FALSE Then
                          FieldData$ = "300" & FILL_CHAR & " " & Mid$( FieldData$, 6 ) & " " & DELIMITER & "c " & "ADD DIMENSIONS"
                      End If
                  End If
              End If

' An internet resource needs the second indicator in an 856 changed to that for a version
' of the resource.

            Case 856
              If Mid$( FieldData$, 5, 1 ) = "0" Then
                  Mid$( FieldData$, 5, 1 ) = "1"
              End If

' If the 33X fields are appropriate, keep them; if not, add them, including both terms
' and codes. Since the 338 field can be any of several values, use a fill character to
' indicate attention is needed.

            Case 336
              If InStr( FieldData$, "text" ) Or InStr( FieldData$, "txt" ) Then
                  Book33X    = TRUE
                Else
                  FieldData$ = ContentType$
              End If

            Case 337
              If InStr( FieldData$, "unmediated" ) Or InStr( FieldData$, "b n " ) Then
                  Book33X    = TRUE
                Else
                  Book33X    = FALSE
                  FieldData$ = MediaType$
              End If

            Case 338
              If Book33X = FALSE Then
                  FieldData$ = CarrierType$
              End If

' Omit some subdivisions or whole subject fields.

            Case 600 To 655

' Don't add FAST headings.

              If InStr( FieldData$, "2 fast" ) Then
                  KeepField = FALSE
                Else

' Remove the format subdivisions "--Periodicals" and "--Maps" from 6XX fields.

                  p = InStr( FieldData$, "periodicals" )
                  If p <> 0 Then
                      If Mid$( FieldData$, p - 3, 1 ) = DELIMITER Then
                          FieldData$ = Left$( FieldData$, p - 5 ) & Mid$( FieldData$, p + 11 )
                      End If
                  End If

                  p = InStr( FieldData$, "maps" )
                  If p <> 0 Then
                      If Mid$( FieldData$, p - 3, 1 ) = DELIMITER Then
                          FieldData$ = Left$( FieldData$, p - 5 ) & Mid$( FieldData$, p + 4 )
                      End If
                  End If

' Don't add subject fields specific to records for scores.

                  If TypeOfRecord$ = "c" Then
                      If InStr( FieldData$, "scores" ) Or InStr( FieldData$, "parts" ) Then
                          KeepField = FALSE
                      End If
                  End If
              End If

          End Select

' For a new record, each field marked as kept is added to an array to be pasted into a
' workform. For an edited record, each field not so marked is deleted.

          If KeepField Then
              If NewRecord Then
                  ReDim Preserve Fields( CopiedFieldCount% )
                  Fields( CopiedFieldCount% ) = FieldData$
                  CopiedFieldCount%           = CopiedFieldCount% + 1
                Else
                  If CS.SetFieldLine( LineNumber%, FieldData$ ) = FALSE Then
                      DeleteProblem = TRUE
                  End If
              End If
            Else
              If NewRecord = FALSE Then
                  If CS.DeleteFieldLine( LineNumber% ) = FALSE Then
                      DeleteProblem = TRUE
                    Else
                      LineNumber%   = LineNumber% - 1
                  End If
                  KeepField = TRUE
              End If
          End If

        Case Else

' The two fields 040 and 049 are not retained for a new record, because the workform
' already contains new, appropriate ones, but neither are they deleted from an edited
' record.

          If Tag% <> 40 And Tag <> 49 Then
              If NewRecord = FALSE Then
                  If CS.DeleteFieldLine( LineNumber% ) = FALSE Then
                      DeleteProblem = TRUE
                    Else
                      LineNumber%   = LineNumber% - 1
                  End If
              End If
          End If

      End Select
    Else
      If LineNumber% = 1 Then
          MsgBox "Sorry, the macro failed.", CRITICAL_MESSAGE, WaltsMacros$
          Exit Sub
        Else
          Exit Do
      End If
  End If
  LineNumber% = LineNumber% + 1
Loop Until FoundField = FALSE

If NewRecord Then

' Open a books workform and immediately reformat it to eliminate all but the 040 and 049
' fields. An edited record already has its appropriate variable fields.

    If CS.OpenWorkform( "bks" ) Then
      Else
        MsgBox "Sorry, the macro failed.", CRITICAL_MESSAGE, WaltsMacros$
        Exit Sub
    End If

    If CS.Reformat Then
    End If

' Add the stored variable fields.

    For i = 0 To UBound( Fields )
      If CS.SetFieldLine( i + 3, Fields( i ) ) = FALSE Then
          MsgBox "Sorry, the macro failed", CRITICAL_MESSAGE, WaltsMacros$
          Exit Sub
      End If
    Next i

End If

' Set up or restore the fixed field. For a workform, all values must be added, if
' available from the original record. For an edited record, some values must be added,
' depending on the format of the record.

PosFF% = CS.FixedFieldPosition
If PosFF% <> DISPLAY_FF_AT_TOP Then
    CS.FixedFieldPosition = DISPLAY_FF_AT_TOP
    ChangedFFView         = TRUE
End If

' This macro assumes a full-level, member input record in RDA (ISBD).

FFSet = CS.SetFixedField( "Desc", "i" )
FFSet = CS.SetFixedField( "Elvl", "I" )
FFSet = CS.SetFixedField( "Srce", "d" )

If NewRecord Then
    FFSet = CS.SetFixedField( ",",     Dates2$ )
    FFSet = CS.SetFixedField( "Audn",  Audn$ )
    FFSet = CS.SetFixedField( "Biog",  Biog$ )
    FFSet = CS.SetFixedField( "Conf",  Conf$ )
    FFSet = CS.SetFixedField( "Cont",  Cont$ )
    FFSet = CS.SetFixedField( "Ctrl",  Ctrl$ )
    FFSet = CS.SetFixedField( "Ctry",  Ctry$ )
    FFSet = CS.SetFixedField( "Dates", Dates1$ )
    FFSet = CS.SetFixedField( "DtSt",  DtSt$ )
    FFSet = CS.SetFixedField( "Fest",  Fest$ )
    FFSet = CS.SetFixedField( "Ills",  Ills$ )
    FFSet = CS.SetFixedField( "Indx",  Indx$ )
    FFSet = CS.SetFixedField( "Lang",  Lang$ )
    FFSet = CS.SetFixedField( "LitF",  LitF$ )
    FFSet = CS.SetFixedField( "MRec",  MRec$ )
  Else
    If CS.GetFixedField( ",", NewDates2$ ) Then
        If NewDates2$ = "" Then
            FFSet = CS.SetFixedField( ",", Dates2$ )
        End If
    End If
    If CS.GetFixedField( "Audn", NewAudn$ ) Then
        If NewAudn$ = "" Then
            FFSet = CS.SetFixedField( "Audn", Audn$ )
        End If
    End If
    If CS.GetFixedField( "Biog", NewBiog$ ) Then
        If NewBiog$ = "" Then
            FFSet = CS.SetFixedField( "Biog", Biog$ )
        End If
    End If
    If CS.GetFixedField( "Conf", NewConf$ ) Then
        If NewConf$ = "" Then
            FFSet = CS.SetFixedField( "Conf", Conf$ )
        End If
    End If
    If CS.GetFixedField( "Cont", NewCont$ ) Then
        If NewCont$ = "" Then
            FFSet = CS.SetFixedField( "Cont", Cont$ )
        End If
    End If
    If CS.GetFixedField( "Ctrl", NewCtrl$ ) Then
        If NewCtrl$ = "" Then
            FFSet = CS.SetFixedField( "Ctrl", Ctrl$ )
        End If
    End If
    If CS.GetFixedField( "Ctry", NewCtry$ ) Then
        If NewCtry$ = "" Then
            FFSet = CS.SetFixedField( "Ctry", Ctry$ )
        End If
    End If
    If CS.GetFixedField( "Dates", NewDates1$ ) Then
        If NewDates1$ = "" Then
            FFSet = CS.SetFixedField( "Dates", Dates1$ )
        End If
    End If
    If CS.GetFixedField( "DtSt", NewDtSt$ ) Then
        If NewDtSt$ Like "[!bcdeikmnpqrstu]" Then
            FFSet = CS.SetFixedField( "DtSt", DtSt$ )
        End If
    End If
    If CS.GetFixedField( "Fest", NewFest$ ) Then
        If NewFest$ = "" Then
            FFSet = CS.SetFixedField( "Fest", Fest$ )
        End If
    End If
    If CS.GetFixedField( "GPub", NewGPub$ ) Then
        If NewGPub$ = "" Then
            FFSet = CS.SetFixedField( "GPub", GPub$ )
        End If
    End If
    If CS.GetFixedField( "Ills", NewIlls$ ) Then
        If NewIlls$ = "" Then
            FFSet = CS.SetFixedField( "Ills", Ills$ )
        End If
    End If
    If CS.GetFixedField( "Indx", NewIndx$ ) Then
        If NewIndx$ = "" Then
            FFSet = CS.SetFixedField( "Indx", Indx$ )
        End If
    End If
    If CS.GetFixedField( "Lang", NewLang$ ) Then
        If NewLang$ = "" Then
            FFSet = CS.SetFixedField( "Lang", Lang$ )
        End If
    End If
    If CS.GetFixedField( "LitF", NewLitF$ ) Then
        If NewLitF$ = "" Then
            FFSet = CS.SetFixedField( "LitF", LitF$ )
        End If
    End If
    If CS.GetFixedField( "MRec", NewMRec$ ) Then
        If NewMRec$ = "" Then
            FFSet = CS.SetFixedField( "MRec", MRec$ )
        End If
    End If

End If

If ChangedFFView Then CS.FixedFieldPosition = PosFF%

' Put back or add the 33X fields.

If CS.GetField( "336", 1, FieldData$ ) = FALSE Then
    VFSet = CS.SetField( 1, ContentType$ )
End If

If CS.GetField( "337", 1, FieldData$ ) = FALSE Then
    VFSet = CS.SetField( 1, MediaType$ )
End If

If CS.GetField( "338", 1, FieldData$ ) = FALSE Then
    VFSet = CS.SetField( 1, CarrierType$ )
End If

' Fix the 040 to indicate language "English" (unless there is a language code already
' present) and description convention "rda" (if not already present).

If CS.GetField( "040", 1, FieldData$ ) Then
    PosSubfC% = InStr( FieldData$, DELIMITER & "c" )
    p = InStr( FieldData$, DELIMITER & "b" )
    If p = 0 Then
        If PosSubfC% <> 0 Then
            FieldData$ = Left$( FieldData$, PosSubfC% - 1 ) & DELIMITER & "b eng " & Mid$ (FieldData$, PosSubfC% )
        End If
      Else
        If InStr( Mid$( FieldData$, p + 3, 4 ), "eng" ) = 0 Then
            MsgBox "Record in another language"
        End If
    End If
    PosSubfC% = InStr( FieldData$, DELIMITER & "c" )
    If InStr( FieldData$, DELIMITER & "e rda" ) = 0 Then
        If PosSubfC% <> 0 Then
            FieldData$ = Left$( FieldData$, PosSubfC% - 1 ) & DELIMITER & "e rda " & Mid$ (FieldData$, PosSubfC% )
        End If
    End If
    VFSet = CS.SetField( 1, FieldData$ )
End If

' Show an alert if there were problems adding or deleting fields.

If AddProblem And DeleteProblem Then
    MsgBox "There were problems in adding and deleting fields.", WARNING_MESSAGE, WaltsMacros$
  ElseIf AddProblem = TRUE And DeleteProblem = FALSE Then
    MsgBox "There were problems in adding fields.", WARNING_MESSAGE, WaltsMacros$
  ElseIf AddProblem = FALSE And DeleteProblem = TRUE Then
    MsgBox "There were problems in deleting fields.", WARNING_MESSAGE, WaltsMacros$
End If

End Sub
'68128021
'
'Macro name: DeriveBookFromAnyFormat
'Macro book: C:\Program Files (x86)\OCLC\Connexion\Program\Macros\Extras2.mbk
'Saved: 6/29/2017 9:13:28 AM using "MacroBookInspector" macro by Walter F. Nickeson.
