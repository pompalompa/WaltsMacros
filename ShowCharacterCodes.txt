'MacroName:ShowCharacterCodes.2023.29
'MacroDescription:Shows the codes for the characters in a selection or a field, with the
' ability to toggle between MARC 21 and Windows-1252 encoding.
'
' This macro was written by Walter F. Nickeson,
' University of Rochester, Rochester, NY
' wnickeson@library.rochester.edu
'
' Last updated: 27 April 2023.
' Check for the latest versions of this and my other macros at
' http://docushare.lib.rochester.edu/docushare/dsweb/View/Collection-2556
' Please e-mail me with bug reports or to suggest improvements.
'
' This macro works for me with Connexion client 3.1 and 64-bit Windows 10 Enterprise &
' 64-bit Windows 10 Pro, but no guarantees are promised or implied.
'
'****************************************************************************************
' How it works: Select text in a record, or place the cursor in a variable data field,
' and run the macro. It displays the code points of the characters in the selection, or,
' if no text has been selected, of the characters in the whole field in which the cursor
' is placed. The macro also attempts to display the characters in the selection or the
' field. However, macro dialog boxes limit displayable characters to those in the Latin
' alphabet, and further, to only those in the Windows-1252 character set. Undisplayable
' characters are represented by an empty pair of square brackets: "[]".
'
' The macro can't get code points of selected non-Latin text, but it can for the whole
' field. It will offer to display the whole field if the selection contains non-Latin
' characters. Of course, these characters can't be displayed by the macro.
'
' Because different character encoding schemes are present in WorldCat records, and it
' won't be obvious just from looking at a record display which scheme has been used, the
' macro allows for toggling between the two primary schemes. One is the Universal
' Character Set (UCS or ISO/IEC 10646) encoding, which is the only encoding form
' authorized for use in MARC 21 records; hereinafter "MARC 21" will be used to refer to
' this form. The other encoding form is Windows-1252. While a single character encoding
' form is enforced upon record export, the record being viewed in a Client window can
' contain characters encoded in different ways, and no information is provided on what
' encoding may have been used. This macro is designed to give some clues about that, and
' can show whether the character "á" has been encoded as the combined characters "a" +
' "´" (code points 097 + 226 in Unicode) or as the single precomposed character "á" (code
' point 225 in Windows-1252). If the macro display of the characters doesn't match the
' record display, try switching the encoding view. It may bring the two displays into
' alignment.
'
' Differences in encoding become critical when manipulating a Connexion record. If one of
' my other macros, or if any other macro, shows unexpected results, with odd characters,
' it may be because it expected MARC 21 characters, but encountered Windows-1252
' characters instead. This macro may be able to confirm if character encoding is the
' issue.
'
' The macro window arranges the code points of the selection or field in pages containing
' up to 80 characters each. The default view is to show MARC 21 encoding; a push button
' toggles between that and Windows-1252. In the MARC 21 view, you can search for a
' specific character by entering its code point to view its name. This feature is
' intended for use only for code points between 158 and 254, because that range includes
' many diacritical marks that the dialog box can't display, or may not be able to display
' clearly. (Note that many code points in that range are not defined.) Code points below
' 158 are, except for subscript and superscript characters, standard Latin alphanumeric
' characters and punctuation. The search feature isn't available in the Windows-1252 view
' because almost all the characters in that repertoire are displayable and recognizable
' in the dialog box.
'
' In addition to the use of the empty box "[]" to represent undisplayable characters, the
' macro uses vertical bars to represent the delimiter and subscript and superscript
' characters. The former appears as "|$|", and the latter as, for example, "|2|". Code
' points not defined are represented by "[×]".
'
' To convert a field to MARC 21, use Joel Hahn's macro "CvtDiacritics," available at
' http://www.hahnlibrary.net/libraries/oml/macros/CvtDiacritics.txt.
'****************************************************************************************

Option Explicit
Option Base 1

Declare Sub FillArrays
Declare Sub FillDisplay( Page%, State% )

Declare Function Dialog1ControlDefinition( Id$, Action%, SVal& )

Global Const DISABLED           As Integer = 0
Global Const ENABLED            As Integer = 1
Global Const INVISIBLE          As Integer = 0
Global Const VISIBLE            As Integer = 1

Global Const ANSEL_COUNT        As Integer = 67
Global Const CHAR_NAME          As Integer = 2
Global Const CODEPOINT          As Integer = 1
Global Const INITIAL            As Integer = 0
Global Const MARC21             As Integer = 1
Global Const MAX_CHARS_PER_PAGE As Integer = 80
Global Const SWITCHED           As Integer = 1
Global Const WIN1252            As Integer = 2

Global CharCount%
Global CurrentPage%
Global Remainder%
Global TotalPages%
Global WaltsMacros$

Global ShowWin1252

Global HighASCII()              As String
Global ANSEL()                  As String
Global Codes()                  As String
Global DisplayChars()           As String
Global Pages()                  As String
Global StoreChars()             As String

'****************************************************************************************

Sub Main

Const CRITICAL_MESSAGE As Integer = 16

Dim CS As Object
On Error Resume Next
Set CS = GetObject( , "Connex.Client" )
On Error GoTo 0
If CS Is Nothing Then Set CS = CreateObject( "Connex.Client" )

Dim CharA%
Dim CharByteCount$
Dim CharT$
Dim Col%
Dim FieldData$
Dim FirstVal%
Dim LastVal%
Dim NCRTest$
Dim Row%
Dim SearchLegend$
Dim Source$
Dim Start%
Dim StringLength%
Dim Tag$
Dim TagOccurrence%
Dim TargetFieldData$
Dim TestFieldData$
Dim TestTag$
Dim TypeOfWindow%

Dim Selection

Dim i As Integer, p As Integer

SearchLegend$ = "Enter a 3-digit code in the range 161-254 to identify an undisplayable MARC character:"
ShowWin1252   = FALSE
WaltsMacros$  = "[Walt's macros] MacroTools:ShowCharacterCodes"

' First, make sure a record is displayed.

TypeOfWindow% = CS.ItemType
Select Case TypeOfWindow%
  Case -1, 5 To 11, 13, 15 To 16, 21 To 25
    MsgBox "Sorry, this macro works only when a record is displayed!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End Select

' Test for whether a selection has been made, and if it has, whether it contains Unicode
' data. Also test to see if the selection spans fields; if it has, indicated by the
' presence of a carriage return, the macro can't continue. But if the selection contains
' Unicode characters the macro can't tell if a carriage return is present.

If CS.GetSelectedText( FieldData$ ) Then
    Selection = TRUE
    If FieldData$ = "Data contains non-latin script" Then
        If MsgBox( "Sorry, this macro can't show character codes when non-Latin script has been selected. Do you want to view the character codes in the whole field instead?", 33, WaltsMacros$ ) = 2 Then
            Exit Sub
        End If
      Else
        If InStr( FieldData$, Chr$( 013 ) ) > 0 Then
            MsgBox "Please limit a selection to within a single field.", CRITICAL_MESSAGE, WaltsMacros$
            Exit Sub
          Else
            GoTo ProcessFieldData:
        End If
    End If
  Else
    Selection = FALSE
End If

' The macro always asks for Unicode data from the selection or field, even if the data is
' simple ASCII. However, the macro language's "GetFieldUnicodeLine" command "has a bug,"
' according to Joel Hahn. It does not always correctly capture a Unicode code point as a
' Numeric Character Reference (NCR). An NCR looks like this: "&#x05D1;", and is a way of
' referring to characters not able to be represented; in this context, it allows the 256-
' character ASCII set to represent the whole Unicode repertoire. This macro gets around
' the apparent bug by using the "GetFieldUnicode" command. To do this, it must first get
' the tag of the current or selected field.

Row% = CS.CursorRow
Col% = CS.CursorColumn

If CS.GetFieldLineUnicode( Row%, TargetFieldData$ ) = FALSE Then
    MsgBox "Sorry, this macro couldn't get the field to analyze.", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
  ElseIf Col% = 0 Then
    MsgBox "Sorry, this macro works only in the variable fields!", CRITICAL_MESSAGE, WaltsMacros$
    Exit Sub
End If

' Starting with line 1 and ending with the line immediately preceding the current field,
' get the field's data in Unicode form. The macro can use the "GetFieldUnicodeLine"
' command for this because at this point it is not looking for the field's character
' data, but solely for the tag, which will be used by the "GetFieldUnicode" command. If
' the tag matches that of the selected field, increment the count of that tag's
' occurrence, and go on to the next field. If the tag has not been found before the
' selected row is reached, then the selected row must be the first occurrence of the tag.
' Otherwise, the selected row must be the next occurrence of the tag. Armed with the
' occurrence, the "GetFieldUnicode" command can then be used to get the field's character
' data, bypassing the bug in the "Line" form of the command.

Tag$ = Left$( TargetFieldData$, 3 )
For i = 1 To Row% - 1
  If CS.GetFieldLineUnicode( i, TestFieldData$ ) Then
      TestTag$ = Left$( TestFieldData$, 3 )
      If TestTag$ = Tag$ Then
          TagOccurrence% = TagOccurrence% + 1
      End If
  End If
Next i
If CS.GetFieldUnicode( Tag$, TagOccurrence% + 1, FieldData$ ) Then
    FieldData$ = Mid( FieldData$, 6 )
  Else
    MsgBox "Failure"
    Exit Sub
End If

ProcessFieldData:

StringLength% = Len( FieldData$ )

p = 1
i = 1

ReDim Codes( 1 )
FillArrays

' Go through the string of data from the field, testing each 8-byte chunk to see if it's
' an NCR. If it is, strip the wrapping characters from beginning and end, keeping only
' the four-byte code. Assign it the ASCII value of zero to make it display as "[]". If
' the 8 bytes don't indicate an NCR, take just the first byte and treat it as ASCII.

Start% = p
Do
  NCRTest$ = Mid$( FieldData$, p, 8 )
  ReDim Preserve Codes( i )
  ReDim Preserve DisplayChars( i )
  ReDim Preserve StoreChars( 2, i )
  If Left$( NCRTest$, 3 ) = "&#x" and Right$( NCRTest$, 1 ) = ";" Then
      Codes( i ) = Mid$( NCRTest$, 4, 4 )
      If Codes( i ) = "01C2" Then   'The delimiter is special: this will display, after a fashion.
          CharA% = 223
        Else
          CharA% = 0
      End If
      p = p + 8
    Else
      CharT$     = Mid$( FieldData$, p, 1 )
      CharA%     = Asc( CharT$ )
      Codes( i ) = Trim$( Str$( CharA% ) )
      p          = p + 1
  End If

' Connexion can display most characters in the major Western languages in Latin script.
' If a character is able to be displayed, or has an equivalent able to be displayed, show
' it; if not, and if a character is a Unicode character encoded as an NCR, display it as
' "[]". The ampersand has to be doubled, otherwise Windows treats it as the shortcut key
' marker, which appears as an underscore of the character that follows. Code points below
' 32 should never appear naturally. They often appear when the "GetFieldUnicodeLine"
' command is used.

  Select Case CharA%
    Case 0 To 31
      StoreChars( MARC21, i )  = "[]"
      StoreChars( WIN1252, i ) = "[]"
      ShowWin1252 = TRUE
    Case 32 To 37, 39 To 126
      StoreChars( MARC21, i )  = CharT$
      StoreChars( WIN1252, i ) = CharT$
    Case 38
      StoreChars( MARC21, i )  = "&&"
      StoreChars( WIN1252, i ) = "&&"
    Case Else
      StoreChars( MARC21, i )  = HighASCII( MARC21, CharA% - 127 )
      StoreChars( WIN1252, i ) = HighASCII( WIN1252, CharA% - 127 )
      ShowWin1252 = TRUE
  End Select
  i = i + 1
Loop Until p > StringLength%

CharCount% = i - 1

' Figure out the total number of pages required to display the field.

TotalPages% = Int( CharCount% / ( MAX_CHARS_PER_PAGE ) ) + 1
Remainder%  = CharCount% Mod MAX_CHARS_PER_PAGE

' Pad the arrays with empty strings up to the character limit per page range, as each
' page display requires all characters in that range of the array to be "displayed," even
' though there is nothing really to show.

If Remainder% > 0 Then
    Start% = ( ( TotalPages% - 1 ) * MAX_CHARS_PER_PAGE ) + 1 + Remainder%
    For i = Start% To TotalPages% * MAX_CHARS_PER_PAGE
      ReDim Preserve Codes( i )
      Codes( i ) = ""
      ReDim Preserve DisplayChars( i )
      DisplayChars( i ) = ""
    Next i
End If

' Figure out the ranges to put in the drop-down list box.

ReDim Pages( TotalPages% )
For i = 1 To TotalPages%
  FirstVal% = ( ( i - 1 ) * MAX_CHARS_PER_PAGE ) + 1
  If i < TotalPages% Then
      LastVal% = i * MAX_CHARS_PER_PAGE
    Else
      LastVal% = ( ( i - 1 ) * MAX_CHARS_PER_PAGE ) + Remainder%
  End If
  Pages( i ) = Trim$( Str$( FirstVal% ) ) & "-" & Trim$( Str$( LastVal% ) )
Next i

' Give the number of characters in the selection or field, followed by the number of
' bytes, if different.

If Selection Then
    Source$ = "selection"
  Else
    Source$ = "field " & Tag$
End If

If CharCount% = StringLength% Then
    CharByteCount$ = Trim$( Str$( CharCount% ) ) & " total characters in " & Source$ & "."
  Else
    CharByteCount$ = Trim$( Str$( CharCount% ) ) & " total characters in " & Source$ & ", encoded in " & Trim$( Str$( StringLength% ) ) & " bytes."
End If

CurrentPage% = 1

Begin Dialog Dialog1Definition  258, 362, WaltsMacros$, .Dialog1ControlDefinition
  OKButton      196, 338,  52,  14
  CancelButton    1,  41,   1,   1
  PushButton    118, 305,  52,  14, "&Previous page",    .Prev
  PushButton    178, 305,  52,  14, "&Next page",        .Next
  PushButton    138,   7,  52,  14, "&Switch",           .Switch
  DropListBox    56, 306,  56,  64, Pages(),             .Pages
  TextBox        76,   8,  56,  12,                      .Encoding
  TextBox       208,  34,  24,  12,                      .SearchBox
  Text           10,  10,  64,   8, "Showing encoding:"
  Text           26, 308,  24,   8, "&Range:"
  Text           22,  32, 180,  16, SearchLegend$,       .Instructions
  GroupBox       10,  24, 238,  31, ""
  GroupBox       10, 292, 238,  38, CharByteCount$
  GroupBox       10,  60, 238,  17, "",                  .Row1
  Text           15,  66,  12,   8, "",                  .Char1
  Text           14,  78,  20,   8, "",                  .Code1
  Text           39,  66,  12,   8, "",                  .Char2
  Text           38,  78,  20,   8, "",                  .Code2
  Text           63,  66,  12,   8, "",                  .Char3
  Text           62,  78,  20,   8, "",                  .Code3
  Text           87,  66,  12,   8, "",                  .Char4
  Text           86,  78,  20,   8, "",                  .Code4
  Text          111,  66,  12,   8, "",                  .Char5
  Text          110,  78,  20,   8, "",                  .Code5
  Text          135,  66,  12,   8, "",                  .Char6
  Text          134,  78,  20,   8, "",                  .Code6
  Text          159,  66,  12,   8, "",                  .Char7
  Text          158,  78,  20,   8, "",                  .Code7
  Text          183,  66,  12,   8, "",                  .Char8
  Text          182,  78,  20,   8, "",                  .Code8
  Text          207,  66,  12,   8, "",                  .Char9
  Text          206,  78,  20,   8, "",                  .Code9
  Text          231,  66,  12,   8, "",                  .Char10
  Text          230,  78,  20,   8, "",                  .Code10
  GroupBox       10,  88, 238,  17, "",                  .Row2
  Text           15,  94,  12,   8, "",                  .Char11
  Text           14, 106,  20,   8, "",                  .Code11
  Text           39,  94,  12,   8, "",                  .Char12
  Text           38, 106,  20,   8, "",                  .Code12
  Text           63,  94,  12,   8, "",                  .Char13
  Text           62, 106,  20,   8, "",                  .Code13
  Text           87,  94,  12,   8, "",                  .Char14
  Text           86, 106,  20,   8, "",                  .Code14
  Text          111,  94,  12,   8, "",                  .Char15
  Text          110, 106,  20,   8, "",                  .Code15
  Text          135,  94,  12,   8, "",                  .Char16
  Text          134, 106,  20,   8, "",                  .Code16
  Text          159,  94,  12,   8, "",                  .Char17
  Text          158, 106,  20,   8, "",                  .Code17
  Text          183,  94,  12,   8, "",                  .Char18
  Text          182, 106,  20,   8, "",                  .Code18
  Text          207,  94,  12,   8, "",                  .Char19
  Text          206, 106,  20,   8, "",                  .Code19
  Text          231,  94,  12,   8, "",                  .Char20
  Text          230, 106,  20,   8, "",                  .Code20
  GroupBox       10, 116, 238,  17, "",                  .Row3
  Text           15, 122,  12,   8, "",                  .Char21
  Text           14, 134,  20,   8, "",                  .Code21
  Text           39, 122,  12,   8, "",                  .Char22
  Text           38, 134,  20,   8, "",                  .Code22
  Text           63, 122,  12,   8, "",                  .Char23
  Text           62, 134,  20,   8, "",                  .Code23
  Text           87, 122,  12,   8, "",                  .Char24
  Text           86, 134,  20,   8, "",                  .Code24
  Text          111, 122,  12,   8, "",                  .Char25
  Text          110, 134,  20,   8, "",                  .Code25
  Text          135, 122,  12,   8, "",                  .Char26
  Text          134, 134,  20,   8, "",                  .Code26
  Text          159, 122,  12,   8, "",                  .Char27
  Text          158, 134,  20,   8, "",                  .Code27
  Text          183, 122,  12,   8, "",                  .Char28
  Text          182, 134,  20,   8, "",                  .Code28
  Text          207, 122,  12,   8, "",                  .Char29
  Text          206, 134,  20,   8, "",                  .Code29
  Text          231, 122,  12,   8, "",                  .Char30
  Text          230, 134,  20,   8, "",                  .Code30
  GroupBox       10, 144, 238,  17, "",                  .Row4
  Text           15, 150,  12,   8, "",                  .Char31
  Text           14, 162,  20,   8, "",                  .Code31
  Text           39, 150,  12,   8, "",                  .Char32
  Text           38, 162,  20,   8, "",                  .Code32
  Text           63, 150,  12,   8, "",                  .Char33
  Text           62, 162,  20,   8, "",                  .Code33
  Text           87, 150,  12,   8, "",                  .Char34
  Text           86, 162,  20,   8, "",                  .Code34
  Text          111, 150,  12,   8, "",                  .Char35
  Text          110, 162,  20,   8, "",                  .Code35
  Text          135, 150,  12,   8, "",                  .Char36
  Text          134, 162,  20,   8, "",                  .Code36
  Text          159, 150,  12,   8, "",                  .Char37
  Text          158, 162,  20,   8, "",                  .Code37
  Text          183, 150,  12,   8, "",                  .Char38
  Text          182, 162,  20,   8, "",                  .Code38
  Text          207, 150,  12,   8, "",                  .Char39
  Text          206, 162,  20,   8, "",                  .Code39
  Text          231, 150,  12,   8, "",                  .Char40
  Text          230, 162,  20,   8, "",                  .Code40
  GroupBox       10, 172, 238,  17, "",                  .Row5
  Text           15, 178,  12,   8, "",                  .Char41
  Text           14, 190,  20,   8, "",                  .Code41
  Text           39, 178,  12,   8, "",                  .Char42
  Text           38, 190,  20,   8, "",                  .Code42
  Text           63, 178,  12,   8, "",                  .Char43
  Text           62, 190,  20,   8, "",                  .Code43
  Text           87, 178,  12,   8, "",                  .Char44
  Text           86, 190,  20,   8, "",                  .Code44
  Text          111, 178,  12,   8, "",                  .Char45
  Text          110, 190,  20,   8, "",                  .Code45
  Text          135, 178,  12,   8, "",                  .Char46
  Text          134, 190,  20,   8, "",                  .Code46
  Text          159, 178,  12,   8, "",                  .Char47
  Text          158, 190,  20,   8, "",                  .Code47
  Text          183, 178,  12,   8, "",                  .Char48
  Text          182, 190,  20,   8, "",                  .Code48
  Text          207, 178,  12,   8, "",                  .Char49
  Text          206, 190,  20,   8, "",                  .Code49
  Text          231, 178,  12,   8, "",                  .Char50
  Text          230, 190,  20,   8, "",                  .Code50
  GroupBox       10, 200, 238,  17, "",                  .Row6
  Text           15, 206,  12,   8, "",                  .Char51
  Text           14, 218,  20,   8, "",                  .Code51
  Text           39, 206,  12,   8, "",                  .Char52
  Text           38, 218,  20,   8, "",                  .Code52
  Text           63, 206,  12,   8, "",                  .Char53
  Text           62, 218,  20,   8, "",                  .Code53
  Text           87, 206,  12,   8, "",                  .Char54
  Text           86, 218,  20,   8, "",                  .Code54
  Text          111, 206,  12,   8, "",                  .Char55
  Text          110, 218,  20,   8, "",                  .Code55
  Text          135, 206,  12,   8, "",                  .Char56
  Text          134, 218,  20,   8, "",                  .Code56
  Text          159, 206,  12,   8, "",                  .Char57
  Text          158, 218,  20,   8, "",                  .Code57
  Text          183, 206,  12,   8, "",                  .Char58
  Text          182, 218,  20,   8, "",                  .Code58
  Text          207, 206,  12,   8, "",                  .Char59
  Text          206, 218,  20,   8, "",                  .Code59
  Text          231, 206,  12,   8, "",                  .Char60
  Text          230, 218,  20,   8, "",                  .Code60
  GroupBox       10, 228, 238,  17, "",                  .Row7
  Text           15, 234,  12,   8, "",                  .Char61
  Text           14, 246,  20,   8, "",                  .Code61
  Text           39, 234,  12,   8, "",                  .Char62
  Text           38, 246,  20,   8, "",                  .Code62
  Text           63, 234,  12,   8, "",                  .Char63
  Text           62, 246,  20,   8, "",                  .Code63
  Text           87, 234,  12,   8, "",                  .Char64
  Text           86, 246,  20,   8, "",                  .Code64
  Text          111, 234,  12,   8, "",                  .Char65
  Text          110, 246,  20,   8, "",                  .Code65
  Text          135, 234,  12,   8, "",                  .Char66
  Text          134, 246,  20,   8, "",                  .Code66
  Text          159, 234,  12,   8, "",                  .Char67
  Text          158, 246,  20,   8, "",                  .Code67
  Text          183, 234,  12,   8, "",                  .Char68
  Text          182, 246,  20,   8, "",                  .Code68
  Text          207, 234,  12,   8, "",                  .Char69
  Text          206, 246,  20,   8, "",                  .Code69
  Text          231, 234,  12,   8, "",                  .Char70
  Text          230, 246,  20,   8, "",                  .Code70
  GroupBox       10, 256, 238,  17, "",                  .Row8
  Text           15, 262,  12,   8, "",                  .Char71
  Text           14, 274,  20,   8, "",                  .Code71
  Text           39, 262,  12,   8, "",                  .Char72
  Text           38, 274,  20,   8, "",                  .Code72
  Text           63, 262,  12,   8, "",                  .Char73
  Text           62, 274,  20,   8, "",                  .Code73
  Text           87, 262,  12,   8, "",                  .Char74
  Text           86, 274,  20,   8, "",                  .Code74
  Text          111, 262,  12,   8, "",                  .Char75
  Text          110, 274,  20,   8, "",                  .Code75
  Text          135, 262,  12,   8, "",                  .Char76
  Text          135, 274,  20,   8, "",                  .Code76
  Text          159, 262,  12,   8, "",                  .Char77
  Text          158, 274,  20,   8, "",                  .Code77
  Text          183, 262,  12,   8, "",                  .Char78
  Text          182, 274,  20,   8, "",                  .Code78
  Text          207, 262,  12,   8, "",                  .Char79
  Text          206, 274,  20,   8, "",                  .Code79
  Text          231, 262,  12,   8, "",                  .Char80
  Text          230, 274,  20,   8, "",                  .Code80
End Dialog

Dim Dialog1 As Dialog1Definition
On Error Resume Next
Dialog Dialog1
If Err = 102 Then Exit Sub

End Sub

'****************************************************************************************

Sub FillArrays

' Add 127 to the array index to get the code point of the character.
' Code points not defined in either encoding are represented by "[×]".

ReDim HighASCII( 2, 128 ) As String

HighASCII( MARC21, 1   ) = "|0|"        : HighASCII( WIN1252, 1   ) = Chr$( 128 )
HighASCII( MARC21, 2   ) = "|1|"        : HighASCII( WIN1252, 2   ) = "[×]"
HighASCII( MARC21, 3   ) = "|2|"        : HighASCII( WIN1252, 3   ) = "[]"
HighASCII( MARC21, 4   ) = "|3|"        : HighASCII( WIN1252, 4   ) = "[]"
HighASCII( MARC21, 5   ) = "|4|"        : HighASCII( WIN1252, 5   ) = "[]"
HighASCII( MARC21, 6   ) = "|5|"        : HighASCII( WIN1252, 6   ) = "[]"
HighASCII( MARC21, 7   ) = "|6|"        : HighASCII( WIN1252, 7   ) = "[]"
HighASCII( MARC21, 8   ) = "|7|"        : HighASCII( WIN1252, 8   ) = "[]"
HighASCII( MARC21, 9   ) = "|8|"        : HighASCII( WIN1252, 9   ) = "[]"
HighASCII( MARC21, 10  ) = "|9|"        : HighASCII( WIN1252, 10  ) = "[]"
HighASCII( MARC21, 11  ) = "|(|"        : HighASCII( WIN1252, 11  ) = "[]"
HighASCII( MARC21, 12  ) = "|)|"        : HighASCII( WIN1252, 12  ) = "[]"
HighASCII( MARC21, 13  ) = "|+|"        : HighASCII( WIN1252, 13  ) = "[]"
HighASCII( MARC21, 14  ) = "|-|"        : HighASCII( WIN1252, 14  ) = "[×]"
HighASCII( MARC21, 15  ) = "[×]"        : HighASCII( WIN1252, 15  ) = "[]"
HighASCII( MARC21, 16  ) = "[×]"        : HighASCII( WIN1252, 16  ) = "[×]"
HighASCII( MARC21, 17  ) = "|0|"        : HighASCII( WIN1252, 17  ) = "[×]"
HighASCII( MARC21, 18  ) = "|1|"        : HighASCII( WIN1252, 18  ) = "[]"
HighASCII( MARC21, 19  ) = "|2|"        : HighASCII( WIN1252, 19  ) = "[]"
HighASCII( MARC21, 20  ) = "|3|"        : HighASCII( WIN1252, 20  ) = "[]"
HighASCII( MARC21, 21  ) = "|4|"        : HighASCII( WIN1252, 21  ) = "[]"
HighASCII( MARC21, 22  ) = "|5|"        : HighASCII( WIN1252, 22  ) = "[]"
HighASCII( MARC21, 23  ) = "|6|"        : HighASCII( WIN1252, 23  ) = "[]"
HighASCII( MARC21, 24  ) = "|7|"        : HighASCII( WIN1252, 24  ) = "[]"
HighASCII( MARC21, 25  ) = "|8|"        : HighASCII( WIN1252, 25  ) = "[]"
HighASCII( MARC21, 26  ) = "|9|"        : HighASCII( WIN1252, 26  ) = "[]"
HighASCII( MARC21, 27  ) = "|(|"        : HighASCII( WIN1252, 27  ) = "[]"
HighASCII( MARC21, 28  ) = "|)|"        : HighASCII( WIN1252, 28  ) = "[]"
HighASCII( MARC21, 29  ) = "|+|"        : HighASCII( WIN1252, 29  ) = "[]"
HighASCII( MARC21, 30  ) = "|-|"        : HighASCII( WIN1252, 30  ) = "[×]"
HighASCII( MARC21, 31  ) = "°"          : HighASCII( WIN1252, 31  ) = "[]"
HighASCII( MARC21, 32  ) = "ß"          : HighASCII( WIN1252, 32  ) = "[]"
HighASCII( MARC21, 33  ) = Chr$( 128 )  : HighASCII( WIN1252, 33  ) = "  "
HighASCII( MARC21, 34  ) = "[]"         : HighASCII( WIN1252, 34  ) = "¡"
HighASCII( MARC21, 35  ) = "Ø"          : HighASCII( WIN1252, 35  ) = "¢"
HighASCII( MARC21, 36  ) = "Ð"          : HighASCII( WIN1252, 36  ) = "£"
HighASCII( MARC21, 37  ) = "Þ"          : HighASCII( WIN1252, 37  ) = "¤"
HighASCII( MARC21, 38  ) = "Æ"          : HighASCII( WIN1252, 38  ) = "¥"
HighASCII( MARC21, 39  ) = "[]"         : HighASCII( WIN1252, 39  ) = "¦"
HighASCII( MARC21, 40  ) = "[]"         : HighASCII( WIN1252, 40  ) = "§"
HighASCII( MARC21, 41  ) = "·"          : HighASCII( WIN1252, 41  ) = "¨"
HighASCII( MARC21, 42  ) = "[]"         : HighASCII( WIN1252, 42  ) = "©"
HighASCII( MARC21, 43  ) = "®"          : HighASCII( WIN1252, 43  ) = "ª"
HighASCII( MARC21, 44  ) = "±"          : HighASCII( WIN1252, 44  ) = "«"
HighASCII( MARC21, 45  ) = "[]"         : HighASCII( WIN1252, 45  ) = "¬"
HighASCII( MARC21, 46  ) = "[]"         : HighASCII( WIN1252, 46  ) = "­"
HighASCII( MARC21, 47  ) = "[]"         : HighASCII( WIN1252, 47  ) = "®"
HighASCII( MARC21, 48  ) = "[×]"        : HighASCII( WIN1252, 48  ) = "¯"
HighASCII( MARC21, 49  ) = "[]"         : HighASCII( WIN1252, 49  ) = "°"
HighASCII( MARC21, 50  ) = "[]"         : HighASCII( WIN1252, 50  ) = "±"
HighASCII( MARC21, 51  ) = "ø"          : HighASCII( WIN1252, 51  ) = "²"
HighASCII( MARC21, 52  ) = "[]"         : HighASCII( WIN1252, 52  ) = "³"
HighASCII( MARC21, 53  ) = "þ"          : HighASCII( WIN1252, 53  ) = "´"
HighASCII( MARC21, 54  ) = "æ"          : HighASCII( WIN1252, 54  ) = "µ"
HighASCII( MARC21, 55  ) = "[]"         : HighASCII( WIN1252, 55  ) = "¶"
HighASCII( MARC21, 56  ) = "[]"         : HighASCII( WIN1252, 56  ) = "·"
HighASCII( MARC21, 57  ) = "[]"         : HighASCII( WIN1252, 57  ) = "¸"
HighASCII( MARC21, 58  ) = "£"          : HighASCII( WIN1252, 58  ) = "¹"
HighASCII( MARC21, 59  ) = "[]"         : HighASCII( WIN1252, 59  ) = "º"
HighASCII( MARC21, 60  ) = "[×]"        : HighASCII( WIN1252, 60  ) = "»"
HighASCII( MARC21, 61  ) = "[]"         : HighASCII( WIN1252, 61  ) = "¼"
HighASCII( MARC21, 62  ) = "[]"         : HighASCII( WIN1252, 62  ) = "½"
HighASCII( MARC21, 63  ) = "[]"         : HighASCII( WIN1252, 63  ) = "¾"
HighASCII( MARC21, 64  ) = "[×]"        : HighASCII( WIN1252, 64  ) = "¿"
HighASCII( MARC21, 65  ) = "[×]"        : HighASCII( WIN1252, 65  ) = "À"
HighASCII( MARC21, 66  ) = "[×]"        : HighASCII( WIN1252, 66  ) = "Á"
HighASCII( MARC21, 67  ) = "[×]"        : HighASCII( WIN1252, 67  ) = "Â"
HighASCII( MARC21, 68  ) = "[×]"        : HighASCII( WIN1252, 68  ) = "Ã"
HighASCII( MARC21, 69  ) = "[×]"        : HighASCII( WIN1252, 69  ) = "Ä"
HighASCII( MARC21, 70  ) = "[×]"        : HighASCII( WIN1252, 70  ) = "Å"
HighASCII( MARC21, 71  ) = "[×]"        : HighASCII( WIN1252, 71  ) = "Æ"
HighASCII( MARC21, 72  ) = "[×]"        : HighASCII( WIN1252, 72  ) = "Ç"
HighASCII( MARC21, 73  ) = "¿"          : HighASCII( WIN1252, 73  ) = "È"
HighASCII( MARC21, 74  ) = "¡"          : HighASCII( WIN1252, 74  ) = "É"
HighASCII( MARC21, 75  ) = "©"          : HighASCII( WIN1252, 75  ) = "Ê"
HighASCII( MARC21, 76  ) = "[]"         : HighASCII( WIN1252, 76  ) = "Ë"
HighASCII( MARC21, 77  ) = "[]"         : HighASCII( WIN1252, 77  ) = "Ì"
HighASCII( MARC21, 78  ) = "[×]"        : HighASCII( WIN1252, 78  ) = "Í"
HighASCII( MARC21, 79  ) = "[×]"        : HighASCII( WIN1252, 79  ) = "Î"
HighASCII( MARC21, 80  ) = "[×]"        : HighASCII( WIN1252, 80  ) = "Ï"
HighASCII( MARC21, 81  ) = "[×]"        : HighASCII( WIN1252, 81  ) = "Ð"
HighASCII( MARC21, 82  ) = "[×]"        : HighASCII( WIN1252, 82  ) = "Ñ"
HighASCII( MARC21, 83  ) = "[×]"        : HighASCII( WIN1252, 83  ) = "Ò"
HighASCII( MARC21, 84  ) = "[×]"        : HighASCII( WIN1252, 84  ) = "Ó"
HighASCII( MARC21, 85  ) = "[×]"        : HighASCII( WIN1252, 85  ) = "Ô"
HighASCII( MARC21, 86  ) = "[×]"        : HighASCII( WIN1252, 86  ) = "Õ"
HighASCII( MARC21, 87  ) = "[×]"        : HighASCII( WIN1252, 87  ) = "Ö"
HighASCII( MARC21, 88  ) = "[×]"        : HighASCII( WIN1252, 88  ) = "×"
HighASCII( MARC21, 89  ) = "[×]"        : HighASCII( WIN1252, 89  ) = "Ø"
HighASCII( MARC21, 90  ) = "[×]"        : HighASCII( WIN1252, 90  ) = "Ù"
HighASCII( MARC21, 91  ) = "[×]"        : HighASCII( WIN1252, 91  ) = "Ú"
HighASCII( MARC21, 92  ) = "[×]"        : HighASCII( WIN1252, 92  ) = "Û"
HighASCII( MARC21, 93  ) = "[×]"        : HighASCII( WIN1252, 93  ) = "Ü"
HighASCII( MARC21, 94  ) = "[×]"        : HighASCII( WIN1252, 94  ) = "Ý"
HighASCII( MARC21, 95  ) = "[×]"        : HighASCII( WIN1252, 95  ) = "Þ"
HighASCII( MARC21, 96  ) = "|$|"        : HighASCII( WIN1252, 96  ) = "ß"
HighASCII( MARC21, 97  ) = "[]"         : HighASCII( WIN1252, 97  ) = "à"
HighASCII( MARC21, 98  ) = "`"          : HighASCII( WIN1252, 98  ) = "á"
HighASCII( MARC21, 99  ) = "´"          : HighASCII( WIN1252, 99  ) = "â"
HighASCII( MARC21, 100 ) = "^"          : HighASCII( WIN1252, 100 ) = "ã"
HighASCII( MARC21, 101 ) = "~"          : HighASCII( WIN1252, 101 ) = "ä"
HighASCII( MARC21, 102 ) = "¯"          : HighASCII( WIN1252, 102 ) = "å"
HighASCII( MARC21, 103 ) = "[]"         : HighASCII( WIN1252, 103 ) = "æ"
HighASCII( MARC21, 104 ) = "[]"         : HighASCII( WIN1252, 104 ) = "ç"
HighASCII( MARC21, 105 ) = "¨"          : HighASCII( WIN1252, 105 ) = "è"
HighASCII( MARC21, 106 ) = "[]"         : HighASCII( WIN1252, 106 ) = "é"
HighASCII( MARC21, 107 ) = "°"          : HighASCII( WIN1252, 107 ) = "ê"
HighASCII( MARC21, 108 ) = "[]"         : HighASCII( WIN1252, 108 ) = "ë"
HighASCII( MARC21, 109 ) = "[]"         : HighASCII( WIN1252, 109 ) = "ì"
HighASCII( MARC21, 110 ) = "[]"         : HighASCII( WIN1252, 110 ) = "í"
HighASCII( MARC21, 111 ) = "[]"         : HighASCII( WIN1252, 111 ) = "î"
HighASCII( MARC21, 112 ) = "[]"         : HighASCII( WIN1252, 112 ) = "ï"
HighASCII( MARC21, 113 ) = "¸"          : HighASCII( WIN1252, 113 ) = "ð"
HighASCII( MARC21, 114 ) = "[]"         : HighASCII( WIN1252, 114 ) = "ñ"
HighASCII( MARC21, 115 ) = "[]"         : HighASCII( WIN1252, 115 ) = "ò"
HighASCII( MARC21, 116 ) = "[]"         : HighASCII( WIN1252, 116 ) = "ó"
HighASCII( MARC21, 117 ) = "[]"         : HighASCII( WIN1252, 117 ) = "ô"
HighASCII( MARC21, 118 ) = "[]"         : HighASCII( WIN1252, 118 ) = "õ"
HighASCII( MARC21, 119 ) = "_"          : HighASCII( WIN1252, 119 ) = "ö"
HighASCII( MARC21, 120 ) = "[]"         : HighASCII( WIN1252, 120 ) = "÷"
HighASCII( MARC21, 121 ) = "[]"         : HighASCII( WIN1252, 121 ) = "ø"
HighASCII( MARC21, 122 ) = "[]"         : HighASCII( WIN1252, 122 ) = "ù"
HighASCII( MARC21, 123 ) = "[]"         : HighASCII( WIN1252, 123 ) = "ú"
HighASCII( MARC21, 124 ) = "[]"         : HighASCII( WIN1252, 124 ) = "û"
HighASCII( MARC21, 125 ) = Chr$( 127 )  : HighASCII( WIN1252, 125 ) = "ü"
HighASCII( MARC21, 126 ) = "[×]"        : HighASCII( WIN1252, 126 ) = "ý"
HighASCII( MARC21, 127 ) = "[]"         : HighASCII( WIN1252, 127 ) = "þ"
HighASCII( MARC21, 128 ) = "[×]"        : HighASCII( WIN1252, 128 ) = "ÿ"

' The character names for the extended Latin range are taken from
' https://www.loc.gov/marc/specifications/codetables/ExtendedLatin.html. The MARC
' character name is followed by the Unicode name; if the MARC name is the same as or very
' similar to the UCS name, only the UCS name is given.

ReDim ANSEL( 2, ANSEL_COUNT ) As String

ANSEL( CODEPOINT, 1  ) = "158" : ANSEL( CHAR_NAME, 1  ) = "Degree sign"
ANSEL( CODEPOINT, 2  ) = "159" : ANSEL( CHAR_NAME, 2  ) = "Eszett"
ANSEL( CODEPOINT, 3  ) = "160" : ANSEL( CHAR_NAME, 3  ) = "Euro sign"
ANSEL( CODEPOINT, 4  ) = "161" : ANSEL( CHAR_NAME, 4  ) = "Uppercase Polish L / Latin capital letter L with stroke"
ANSEL( CODEPOINT, 5  ) = "162" : ANSEL( CHAR_NAME, 5  ) = "Uppercase Scandinavian O / Latin capital letter O with stroke"
ANSEL( CODEPOINT, 6  ) = "163" : ANSEL( CHAR_NAME, 6  ) = "Uppercase D with crossbar / Latin capital letter D with stroke"
ANSEL( CODEPOINT, 7  ) = "164" : ANSEL( CHAR_NAME, 7  ) = "Uppercase Icelandic Thorn / Latin capital letter Thorn"
ANSEL( CODEPOINT, 8  ) = "165" : ANSEL( CHAR_NAME, 8  ) = "Uppercase digraph AE / Latin capital ligature AE"
ANSEL( CODEPOINT, 9  ) = "166" : ANSEL( CHAR_NAME, 9  ) = "Uppercase digraph OE / Latin capital ligature OE"
ANSEL( CODEPOINT, 10 ) = "167" : ANSEL( CHAR_NAME, 10 ) = "Soft sign, prime / modifier letter prime"
ANSEL( CODEPOINT, 11 ) = "168" : ANSEL( CHAR_NAME, 11 ) = "Middle dot"
ANSEL( CODEPOINT, 12 ) = "169" : ANSEL( CHAR_NAME, 12 ) = "Music flat sign"
ANSEL( CODEPOINT, 13 ) = "170" : ANSEL( CHAR_NAME, 13 ) = "Patent mark / registered sign"
ANSEL( CODEPOINT, 14 ) = "171" : ANSEL( CHAR_NAME, 14 ) = "Plus or minus / plus-minus sign"
ANSEL( CODEPOINT, 15 ) = "172" : ANSEL( CHAR_NAME, 15 ) = "Uppercase O-hook / Latin capital letter O with horn"
ANSEL( CODEPOINT, 16 ) = "173" : ANSEL( CHAR_NAME, 16 ) = "Uppercase U-hook / Latin capital letter U with horn"
ANSEL( CODEPOINT, 17 ) = "174" : ANSEL( CHAR_NAME, 17 ) = "Alif / modifier letter apostrophe"
ANSEL( CODEPOINT, 18 ) = "176" : ANSEL( CHAR_NAME, 18 ) = "Ayn / modifier letter turned comma"
ANSEL( CODEPOINT, 19 ) = "177" : ANSEL( CHAR_NAME, 19 ) = "Lowercase Polish l / Latin small letter l with stroke"
ANSEL( CODEPOINT, 20 ) = "178" : ANSEL( CHAR_NAME, 20 ) = "Lowercase Scandinavian o / Latin small letter o with stroke"
ANSEL( CODEPOINT, 21 ) = "179" : ANSEL( CHAR_NAME, 21 ) = "Lowercase d with crossbar / Latin small letter d with stroke"
ANSEL( CODEPOINT, 22 ) = "180" : ANSEL( CHAR_NAME, 22 ) = "Lowercase Icelandic thorn / Latin small letter thorn"
ANSEL( CODEPOINT, 23 ) = "181" : ANSEL( CHAR_NAME, 23 ) = "Lowercase digraph ae / Latin small ligature ae"
ANSEL( CODEPOINT, 24 ) = "182" : ANSEL( CHAR_NAME, 24 ) = "Lowercase digraph oe / Latin small ligature oe"
ANSEL( CODEPOINT, 25 ) = "183" : ANSEL( CHAR_NAME, 25 ) = "Hard sign, double prime / modifier letter double prime"
ANSEL( CODEPOINT, 26 ) = "184" : ANSEL( CHAR_NAME, 26 ) = "Lowercase Turkish i / Latin small letter dotless i"
ANSEL( CODEPOINT, 27 ) = "185" : ANSEL( CHAR_NAME, 27 ) = "British pound / pound sign"
ANSEL( CODEPOINT, 28 ) = "186" : ANSEL( CHAR_NAME, 28 ) = "Lowercase eth / Latin small letter eth"
ANSEL( CODEPOINT, 29 ) = "188" : ANSEL( CHAR_NAME, 29 ) = "Lowercase o-hook / Latin small letter o with horn"
ANSEL( CODEPOINT, 30 ) = "189" : ANSEL( CHAR_NAME, 30 ) = "Lowercase u-hook / Latin small letter u with horn"
ANSEL( CODEPOINT, 31 ) = "190" : ANSEL( CHAR_NAME, 31 ) = "Script small l"
ANSEL( CODEPOINT, 32 ) = "200" : ANSEL( CHAR_NAME, 32 ) = "Inverted question mark"
ANSEL( CODEPOINT, 33 ) = "201" : ANSEL( CHAR_NAME, 33 ) = "Inverted exclamation mark"
ANSEL( CODEPOINT, 34 ) = "202" : ANSEL( CHAR_NAME, 34 ) = "Copyright sign"
ANSEL( CODEPOINT, 35 ) = "203" : ANSEL( CHAR_NAME, 35 ) = "Sound recording copyright sign"
ANSEL( CODEPOINT, 36 ) = "204" : ANSEL( CHAR_NAME, 36 ) = "Musical sharp sign"
ANSEL( CODEPOINT, 37 ) = "223" : ANSEL( CHAR_NAME, 37 ) = "DELIMITER"
ANSEL( CODEPOINT, 38 ) = "224" : ANSEL( CHAR_NAME, 38 ) = "Pseudo question mark / combining hook above"
ANSEL( CODEPOINT, 39 ) = "225" : ANSEL( CHAR_NAME, 39 ) = "Grave / combining grave accent"
ANSEL( CODEPOINT, 40 ) = "226" : ANSEL( CHAR_NAME, 40 ) = "Acute / combining acute accent"
ANSEL( CODEPOINT, 41 ) = "227" : ANSEL( CHAR_NAME, 41 ) = "Circumflex / combining circumflex accent"
ANSEL( CODEPOINT, 42 ) = "228" : ANSEL( CHAR_NAME, 42 ) = "Tilde / combining tilde"
ANSEL( CODEPOINT, 43 ) = "229" : ANSEL( CHAR_NAME, 43 ) = "Macron / combining macron"
ANSEL( CODEPOINT, 44 ) = "230" : ANSEL( CHAR_NAME, 44 ) = "Breve / combining breve"
ANSEL( CODEPOINT, 45 ) = "231" : ANSEL( CHAR_NAME, 45 ) = "Superior dot / combining dot above"
ANSEL( CODEPOINT, 46 ) = "232" : ANSEL( CHAR_NAME, 46 ) = "Umlaut, diaeresis / combining diaeresis"
ANSEL( CODEPOINT, 47 ) = "233" : ANSEL( CHAR_NAME, 47 ) = "Hacek / combining caron"
ANSEL( CODEPOINT, 48 ) = "234" : ANSEL( CHAR_NAME, 48 ) = "Circle above, angstrom / combining ring above"
ANSEL( CODEPOINT, 49 ) = "235" : ANSEL( CHAR_NAME, 49 ) = "Ligature, first half / combining double inverted breve"
ANSEL( CODEPOINT, 50 ) = "236" : ANSEL( CHAR_NAME, 50 ) = "Ligature, second half / combining ligature right half"
ANSEL( CODEPOINT, 51 ) = "237" : ANSEL( CHAR_NAME, 51 ) = "High comma, off center / combining comma above right"
ANSEL( CODEPOINT, 52 ) = "238" : ANSEL( CHAR_NAME, 52 ) = "Double acute / combining double acute accent"
ANSEL( CODEPOINT, 53 ) = "239" : ANSEL( CHAR_NAME, 53 ) = "Candrabindu / combining candrabindu"
ANSEL( CODEPOINT, 54 ) = "240" : ANSEL( CHAR_NAME, 54 ) = "Cedilla / combining cedilla"
ANSEL( CODEPOINT, 55 ) = "241" : ANSEL( CHAR_NAME, 55 ) = "Right hook, ogonek / combining ogonek"
ANSEL( CODEPOINT, 56 ) = "242" : ANSEL( CHAR_NAME, 56 ) = "Dot below / combining dot below"
ANSEL( CODEPOINT, 57 ) = "243" : ANSEL( CHAR_NAME, 57 ) = "Double dot below / combining diaeresis below"
ANSEL( CODEPOINT, 58 ) = "244" : ANSEL( CHAR_NAME, 58 ) = "Circle below / combining ring below"
ANSEL( CODEPOINT, 59 ) = "245" : ANSEL( CHAR_NAME, 59 ) = "Double underscore / combining double low line"
ANSEL( CODEPOINT, 60 ) = "246" : ANSEL( CHAR_NAME, 60 ) = "Underscore / combining low line"
ANSEL( CODEPOINT, 61 ) = "247" : ANSEL( CHAR_NAME, 61 ) = "Left hook (comma below) / combining comma below"
ANSEL( CODEPOINT, 62 ) = "248" : ANSEL( CHAR_NAME, 62 ) = "Right cedilla / combining left half ring below"
ANSEL( CODEPOINT, 63 ) = "249" : ANSEL( CHAR_NAME, 63 ) = "Upadhmaniya / combining breve below"
ANSEL( CODEPOINT, 64 ) = "250" : ANSEL( CHAR_NAME, 64 ) = "Double tilde, first half / combining double tilde"
ANSEL( CODEPOINT, 65 ) = "251" : ANSEL( CHAR_NAME, 65 ) = "Double tilde, second half / combining double tilde right half"
ANSEL( CODEPOINT, 66 ) = "252" : ANSEL( CHAR_NAME, 66 ) = "FILL CHARACTER"
ANSEL( CODEPOINT, 67 ) = "254" : ANSEL( CHAR_NAME, 67 ) = "High comma, centered / combining comma above"

End Sub

'****************************************************************************************

Sub FillDisplay( CurrentPage%, State% )

' Set up everything on the macro's invocation and if the page changes (the state of the
' dialog box is considered INITIAL). If the encoding form is switched (the state of the
' dialog box is considered SWITCHED), only the characters change; everything else on the
' page remains the same, and need not be re-drawn.

If State% = INITIAL Then

    If CurrentPage% = 1 Then
        If TotalPages% = 1 Then
            DlgVisible "Prev",         INVISIBLE
            DlgVisible "Next",         INVISIBLE
          Else
            DlgEnable  "Prev",         DISABLED
            DlgEnable  "Next",         ENABLED
        End If
      Else
        If CurrentPage% = TotalPages% Then
            DlgEnable  "Prev",         ENABLED
            DlgEnable  "Next",         DISABLED
          Else
            DlgEnable  "Prev",         ENABLED
            DlgEnable  "Next",         ENABLED
        End If
    End If

    DlgValue   "Pages",        CurrentPage% - 1

    If CurrentPage% = TotalPages% Then
        If Remainder% < 11 Then
            DlgVisible "Row2",         INVISIBLE
            DlgVisible "Row3",         INVISIBLE
            DlgVisible "Row4",         INVISIBLE
            DlgVisible "Row5",         INVISIBLE
            DlgVisible "Row6",         INVISIBLE
            DlgVisible "Row7",         INVISIBLE
            DlgVisible "Row8",         INVISIBLE
          ElseIf Remainder% < 21 Then
            DlgVisible "Row3",         INVISIBLE
            DlgVisible "Row4",         INVISIBLE
            DlgVisible "Row5",         INVISIBLE
            DlgVisible "Row6",         INVISIBLE
            DlgVisible "Row7",         INVISIBLE
            DlgVisible "Row8",         INVISIBLE
          ElseIf Remainder% < 31 Then
            DlgVisible "Row4",         INVISIBLE
            DlgVisible "Row5",         INVISIBLE
            DlgVisible "Row6",         INVISIBLE
            DlgVisible "Row7",         INVISIBLE
            DlgVisible "Row8",         INVISIBLE
          ElseIf Remainder% < 41 Then
            DlgVisible "Row5",         INVISIBLE
            DlgVisible "Row6",         INVISIBLE
            DlgVisible "Row7",         INVISIBLE
            DlgVisible "Row8",         INVISIBLE
          ElseIf Remainder% < 51 Then
            DlgVisible "Row6",         INVISIBLE
            DlgVisible "Row7",         INVISIBLE
            DlgVisible "Row8",         INVISIBLE
          ElseIf Remainder% < 61 Then
            DlgVisible "Row7",         INVISIBLE
            DlgVisible "Row8",         INVISIBLE
          ElseIf Remainder% < 71 Then
            DlgVisible "Row8",         INVISIBLE
        End If
      Else
        DlgVisible "Row1",         VISIBLE
        DlgVisible "Row2",         VISIBLE
        DlgVisible "Row3",         VISIBLE
        DlgVisible "Row4",         VISIBLE
        DlgVisible "Row5",         VISIBLE
        DlgVisible "Row6",         VISIBLE
        DlgVisible "Row7",         VISIBLE
        DlgVisible "Row8",         VISIBLE
    End If

    DlgText    "Code1",        Codes(  1 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code2",        Codes(  2 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code3",        Codes(  3 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code4",        Codes(  4 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code5",        Codes(  5 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code6",        Codes(  6 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code7",        Codes(  7 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code8",        Codes(  8 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code9",        Codes(  9 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code10",       Codes( 10 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code11",       Codes( 11 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code12",       Codes( 12 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code13",       Codes( 13 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code14",       Codes( 14 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code15",       Codes( 15 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code16",       Codes( 16 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code17",       Codes( 17 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code18",       Codes( 18 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code19",       Codes( 19 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code20",       Codes( 20 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code21",       Codes( 21 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code22",       Codes( 22 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code23",       Codes( 23 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code24",       Codes( 24 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code25",       Codes( 25 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code26",       Codes( 26 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code27",       Codes( 27 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code28",       Codes( 28 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code29",       Codes( 29 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code30",       Codes( 30 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code31",       Codes( 31 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code32",       Codes( 32 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code33",       Codes( 33 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code34",       Codes( 34 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code35",       Codes( 35 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code36",       Codes( 36 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code37",       Codes( 37 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code38",       Codes( 38 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code39",       Codes( 39 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code40",       Codes( 40 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code41",       Codes( 41 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code42",       Codes( 42 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code43",       Codes( 43 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code44",       Codes( 44 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code45",       Codes( 45 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code46",       Codes( 46 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code47",       Codes( 47 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code48",       Codes( 48 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code49",       Codes( 49 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code50",       Codes( 50 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code51",       Codes( 51 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code52",       Codes( 52 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code53",       Codes( 53 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code54",       Codes( 54 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code55",       Codes( 55 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code56",       Codes( 56 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code57",       Codes( 57 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code58",       Codes( 58 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code59",       Codes( 59 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code60",       Codes( 60 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code61",       Codes( 61 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code62",       Codes( 62 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code63",       Codes( 63 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code64",       Codes( 64 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code65",       Codes( 65 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code66",       Codes( 66 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code67",       Codes( 67 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code68",       Codes( 68 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code69",       Codes( 69 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code70",       Codes( 70 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code71",       Codes( 71 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code72",       Codes( 72 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code73",       Codes( 73 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code74",       Codes( 74 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code75",       Codes( 75 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code76",       Codes( 76 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code77",       Codes( 77 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code78",       Codes( 78 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code79",       Codes( 79 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
    DlgText    "Code80",       Codes( 80 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )

End If

DlgText    "Char1",        DisplayChars(  1 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char2",        DisplayChars(  2 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char3",        DisplayChars(  3 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char4",        DisplayChars(  4 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char5",        DisplayChars(  5 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char6",        DisplayChars(  6 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char7",        DisplayChars(  7 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char8",        DisplayChars(  8 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char9",        DisplayChars(  9 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char10",       DisplayChars( 10 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char11",       DisplayChars( 11 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char12",       DisplayChars( 12 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char13",       DisplayChars( 13 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char14",       DisplayChars( 14 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char15",       DisplayChars( 15 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char16",       DisplayChars( 16 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char17",       DisplayChars( 17 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char18",       DisplayChars( 18 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char19",       DisplayChars( 19 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char20",       DisplayChars( 20 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char21",       DisplayChars( 21 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char22",       DisplayChars( 22 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char23",       DisplayChars( 23 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char24",       DisplayChars( 24 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char25",       DisplayChars( 25 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char26",       DisplayChars( 26 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char27",       DisplayChars( 27 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char28",       DisplayChars( 28 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char29",       DisplayChars( 29 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char30",       DisplayChars( 30 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char31",       DisplayChars( 31 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char32",       DisplayChars( 32 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char33",       DisplayChars( 33 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char34",       DisplayChars( 34 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char35",       DisplayChars( 35 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char36",       DisplayChars( 36 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char37",       DisplayChars( 37 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char38",       DisplayChars( 38 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char39",       DisplayChars( 39 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char40",       DisplayChars( 40 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char41",       DisplayChars( 41 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char42",       DisplayChars( 42 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char43",       DisplayChars( 43 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char44",       DisplayChars( 44 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char45",       DisplayChars( 45 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char46",       DisplayChars( 46 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char47",       DisplayChars( 47 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char48",       DisplayChars( 48 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char49",       DisplayChars( 49 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char50",       DisplayChars( 50 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char51",       DisplayChars( 51 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char52",       DisplayChars( 52 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char53",       DisplayChars( 53 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char54",       DisplayChars( 54 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char55",       DisplayChars( 55 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char56",       DisplayChars( 56 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char57",       DisplayChars( 57 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char58",       DisplayChars( 58 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char59",       DisplayChars( 59 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char60",       DisplayChars( 60 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char61",       DisplayChars( 61 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char62",       DisplayChars( 62 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char63",       DisplayChars( 63 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char64",       DisplayChars( 64 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char65",       DisplayChars( 65 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char66",       DisplayChars( 66 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char67",       DisplayChars( 67 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char68",       DisplayChars( 68 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char69",       DisplayChars( 69 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char70",       DisplayChars( 70 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char71",       DisplayChars( 71 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char72",       DisplayChars( 72 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char73",       DisplayChars( 73 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char74",       DisplayChars( 74 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char75",       DisplayChars( 75 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char76",       DisplayChars( 76 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char77",       DisplayChars( 77 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char78",       DisplayChars( 78 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char79",       DisplayChars( 79 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )
DlgText    "Char80",       DisplayChars( 80 + ( MAX_CHARS_PER_PAGE * ( CurrentPage% - 1 ) ) )

End Sub

'****************************************************************************************

Function Dialog1ControlDefinition( Id$, Action%, SVal& )

Const CONTROL_CHANGE      As Integer = 2
Const FOCUS_CHANGE        As Integer = 4
Const IDLE_STATE          As Integer = 5
Const INFORMATION_MESSAGE As Integer = 64
Const INITIALIZE          As Integer = 1
Const KEEP_DLG_OPEN       As Integer = -1

Dim CharacterName$
Dim FirstVal%
Dim LastVal%
Dim Range$
Dim SearchString$

Dim i As Integer

Select Case Action%

  Case INITIALIZE

    DlgVisible "Cancel",       INVISIBLE
    DlgText    "Encoding",     "MARC21"
    If ShowWin1252 = False Then
        DlgEnable  "Switch",       DISABLED
    End If
    For i = 1 To CharCount%
      DisplayChars( i ) = StoreChars( MARC21, i )
    Next i

    Call FillDisplay( CurrentPage%, INITIAL )


  Case CONTROL_CHANGE

' When the "Forward" and "Previous" buttons are clicked, they change the current page,
' and they also may need to be disabled at the ends of the ranges. The dialog box stays
' open.

    Select Case Id$

      Case "Prev"

        CurrentPage% = CurrentPage% - 1
        DlgEnable  "Next",         ENABLED
        If CurrentPage% = 1 Then
            DlgEnable  "Prev",         DISABLED
          Else
            DlgEnable  "Prev",         ENABLED
        End If
        Dialog1ControlDefinition = KEEP_DLG_OPEN
        Call FillDisplay( CurrentPage%, INITIAL )

      Case "Next"

        CurrentPage% = CurrentPage% + 1
        DlgEnable  "Prev",         ENABLED
        If CurrentPage% = TotalPages% Then
            DlgEnable  "Next",         DISABLED
          Else
            DlgEnable  "Next",         ENABLED
        End If
        Dialog1ControlDefinition = KEEP_DLG_OPEN
        Call FillDisplay( CurrentPage%, INITIAL )

' Selecting a range of characters from the drop-down box changes the current page.

      Case "Pages"

        CurrentPage% = DlgValue( "Pages" ) + 1
        Call FillDisplay( CurrentPage%, INITIAL )

      Case "Switch"

' The "Switch" button simply toggles between the two different encodings. When Windows-
' 1252 encoding is being displayed, disable the character identification input box, as
' it can be used only for MARC characters.

        If DlgText( "Encoding" ) = "MARC21" Then
            DlgText    "Encoding",     "Windows-1252"
            For i = 1 To CharCount%
              DisplayChars( i ) = StoreChars( WIN1252, i )
            Next i
            DlgEnable  "SearchBox",    DISABLED
            DlgEnable  "Instructions", DISABLED
          Else
            DlgText    "Encoding",     "MARC21"
            For i = 1 To CharCount%
              DisplayChars( i ) = StoreChars( MARC21, i )
            Next i
            DlgEnable  "SearchBox",    ENABLED
            DlgEnable  "Instructions", ENABLED
        End If
        Call FillDisplay( CurrentPage%, SWITCHED )
        Dialog1ControlDefinition = KEEP_DLG_OPEN

    End Select


  Case FOCUS_CHANGE

' The macro shows the encoding being viewed in a text box, because that control makes its
' contents stand out more prominently than a text area in the dialog box. However, it's
' not made for input, so if it gets the focus, shunt the focus to another control.

    If DlgText( "Encoding" ) = "MARC21" Then
        If Id$ = "Encoding" Then
            If ShowWin1252 Then
                DlgFocus   "Switch"
              Else
                DlgFocus   "OK"
            End If
        End If
    End If


  Case IDLE_STATE

' Input to the code search box is monitored until it meets two conditions: It must be
' three digits only, and the value of the number they form is between 158 and 254. When
' those conditions are met, display a message box showing the code point searched and its
' character name. When the message box is dismissed, clear the input box, but keep the
' cursor there for entry of another code point.

    If DlgText( "Encoding" ) = "MARC21" Then
        SearchString$ = DlgText( "SearchBox" )
        If SearchString$ <> "" Then
            If Len( SearchString$ ) = 3 And _
               Mid$( SearchString$, 1, 1 ) Like "[0-9]" And _
               Mid$( SearchString$, 2, 1 ) Like "[0-9]" And _
               Mid$( SearchString$, 3, 1 ) Like "[0-9]" And _
               Val( SearchString$ ) > 157 And Val( SearchString$ ) < 255 Then
                For i = 1 To ANSEL_COUNT
                  If SearchString$ = ANSEL( CODEPOINT, i ) Then
                      CharacterName$ = ANSEL( CHAR_NAME, i )
                      Exit For
                  End If
                Next i
                If CharacterName$ = "" Then
                    CharacterName$ = "This code point is undefined."
                End If
                MsgBox SearchString$ & " = " & CharacterName$, INFORMATION_MESSAGE, WaltsMacros$
                DlgText    "SearchBox",    ""
            End If
        End If
        Dialog1ControlDefinition = KEEP_DLG_OPEN
    End If

End Select

End Function
'114766662
'
'Macro name: ShowCharacterCodes
'Macro book: C:\Users\wnickeson\AppData\Roaming\OCLC\Connex\Macros\MacroTools.mbk
'Saved: 4/27/2023 3:56:41 PM using "MacroBookInspector" macro by Walter F. Nickeson.
